<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-15T21:31:34+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MSSP Lab</title><subtitle>Cybersecurity, red team, blue team, hacking</subtitle><author><name>MSSP Lab</name></author><entry><title type="html">Malware analysis report: Babuk ransomware</title><link href="http://localhost:4000/threat-hunting/2023/06/15/malware-analysis-babuk.html" rel="alternate" type="text/html" title="Malware analysis report: Babuk ransomware" /><published>2023-06-15T05:00:00+03:00</published><updated>2023-06-15T05:00:00+03:00</updated><id>http://localhost:4000/threat-hunting/2023/06/15/malware-analysis-babuk</id><content type="html" xml:base="http://localhost:4000/threat-hunting/2023/06/15/malware-analysis-babuk.html">&lt;p&gt;&lt;strong&gt;Babuk&lt;/strong&gt; is a ransomware family that was first discovered in early 2021. It quickly became infamous, especially among corporate networks, for its ability to quickly encrypt files and demand ransom. However, the decisive moment in its development was the leak of the source code, which subsequently contributed to the spread of new ransomware variants.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/babuk.png&quot; alt=&quot;apt29&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;threat-actor&quot;&gt;Threat actor&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Babuk&lt;/em&gt;, also known as &lt;em&gt;Team Babuk&lt;/em&gt;, is a criminal group that developed and distributed the Babuk ransomware. The group was first discovered in early 2021 and since then they have been seen in several major cyberattacks, especially against corporate networks.     &lt;br /&gt;
Unlike many other cybercriminal groups, Babuk was so fearless that they even threatened to release the stolen data if they did not receive a ransom. In fact, they even set up their own website, &lt;em&gt;“Babuk Locker’s Leak Site”&lt;/em&gt;, where they posted details of victims who refused to pay.     &lt;br /&gt;
Like many similar groups, Babuk operates on a Ransomware-as-a-Service (RaaS) model, where they offer their services to other cybercriminals for a share of the ransom.&lt;/p&gt;

&lt;h3 id=&quot;distributed-amd-infiltration&quot;&gt;Distributed amd Infiltration&lt;/h3&gt;

&lt;p&gt;Babuk is typically distributed through phishing campaigns that use infected attachments or links. Infiltration: After effectively infiltrating the system, Babuk begins encrypting files using its own encryption algorithm based on the Salsa20 and RSA ciphers.&lt;/p&gt;

&lt;h3 id=&quot;post-infection-behavior&quot;&gt;Post-Infection Behavior&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Babuk&lt;/em&gt; changes the extension of encrypted files to include its own unique extension and leaves a ransom message to restore the files. Babuk also removes spear shadows and backups to increase pressure on the victim.&lt;/p&gt;

&lt;h3 id=&quot;identification&quot;&gt;Identification&lt;/h3&gt;

&lt;p&gt;Sample is being investigated:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample.exe&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;31232 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e10713a4a5f635767dcd54d609bed977&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;320d799beef673a98481757b2ff7e3463ce67916&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8203c2f00ecd3ae960cb3247a7d7bfb35e55c38939607c85dbdb5c92f0495fa9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, check our sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/8203c2f00ecd3ae960cb3247a7d7bfb35e55c38939607c85dbdb5c92f0495fa9/detection&quot;&gt;https://www.virustotal.com/gui/file/8203c2f00ecd3ae960cb3247a7d7bfb35e55c38939607c85dbdb5c92f0495fa9/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_09-45.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As we can see, 63 of 70 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This sample is written in C++. protects its keys and encrypts files using its own implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA256&lt;/code&gt; hashing, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; encryption, and Elliptic-curve Diffie–Hellman (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ECDH&lt;/code&gt;) key generation and exchange algorithm. Similar to other ransomware, it can propagate its encryption by enumerating available network resources.&lt;/p&gt;

&lt;h3 id=&quot;static-analysis&quot;&gt;Static analysis&lt;/h3&gt;

&lt;p&gt;The specified sample is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32-bit&lt;/code&gt; PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_09-57.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_09-58.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; for looking metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_10-01.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;File timestamp is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020:12:30 14:03:14+03:00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Shannon entropy of the sections in the sample:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_10-03.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compiled via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Visual Studio 2019 16.7[GUI32]&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_11-34.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and not packed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_11-36.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ransom note from Babuk:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_11-44.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_11-59.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-analysis&quot;&gt;Dynamic analysis&lt;/h3&gt;

&lt;p&gt;Babuk is capable of operating with or without command line parameters. If no parameter is specified, encryption is limited to local devices only:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_12-16.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-nolan&lt;/code&gt; - Not encrypting LAN    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lansecond&lt;/code&gt; - Encrypting LAN after files (first encrypting files and then LAN)           &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lanfirst&lt;/code&gt; - Encrypting LAN first and then files&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terminating processes&lt;/strong&gt; - Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateToolhelp32Snapshot&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process32FirstW&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process32NextW&lt;/code&gt; to investigate all of the running processes on the system, Babuk can iterate and search for processes that need to be closed. It will execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TerminateProcess&lt;/code&gt; to terminate any found processes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_12-06.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the list of processes to be closed:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oracle.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ocssd.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dbsnmp.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;synctime.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;agntsvc.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isqlplussvc.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xfssvccon.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mydesktopservice.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ocautoupds.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encsvc.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firefox.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tbirdconfig.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mydesktopqos.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ocomm.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dbeng50.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqbcoreservice.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;excel.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infopath.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msaccess.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mspub.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onenote.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outlook.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;powerpnt.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;steam.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thebat.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thunderbird.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visio.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;winword.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wordpad.exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notepad.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Shadow copies&lt;/strong&gt; - Babuk attempts to remove shadow duplicates prior to and following encryption:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_12-11.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before invoking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShellExecuteW&lt;/code&gt; to execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cmd.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/c&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vssadmin.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shadows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/quiet&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wow64DisableWow64FsRedirection&lt;/code&gt; is called to disable file system redirection.&lt;/p&gt;

&lt;p&gt;After removing the shadow copies, Babuk verifies whether the system is powered by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64-bit&lt;/code&gt; processor. If so, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wow64RevertWow64FsRedirection&lt;/code&gt; is invoked to re-enable file system redirection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terminating services&lt;/strong&gt; - The authors of Babuk hard-coded a list of services that must be terminated prior to encryption.    &lt;br /&gt;
Babuk will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnumDependentServicesA&lt;/code&gt; prior to terminating a service to retrieve the name and status of each dependent service.    &lt;br /&gt;
It will then invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ControlService&lt;/code&gt; with the control code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERVICE_CONTROL_STOP&lt;/code&gt; to halt them prior to terminating the primary service in the same manner:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_12-50.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;List of services:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vss, sql, svc&lt;span class=&quot;nv&quot;&gt;$,&lt;/span&gt; memtas, mepocs, sophos, veeam, backup, GxVss, GxBlr, GxFWD, GxCVD, GxCIMgr, DefWatch, ccEvtMgr,
ccSetMgr, SavRoam, RTVscan, QBFCService, QBIDPService, Intuit.QuickBooks.FCS, QBCFMonitorService, YooBackup,
YooIT, zhudongfangyu, sophos, stc_raw_agent, VSNAPVSS, VeeamTransportSvc, VeeamDeploymentService, VeeamNFSSvc,
veeam, PDVFSService, BackupExecVSSProvider, BackupExecAgentAccelerator, BackupExecAgentBrowser,
BackupExecDiveciMediaService, BackupExecJobEngine, BackupExecManagementService, BackupExecRPCService,
AcrSch2Svc, AcronisAgent, CASAD2DWebSvc, CAARCUpdateSvc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Encryption logic&lt;/strong&gt; - the most interesting part of our research. First, Babuk generates four random buffers using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RtlGenRandom&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_13-05.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RtlGenRandom - This function is available as a resource named SystemFunction036 in Advapi32.dll.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two are utilized as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; keys, while the remaining two are utilized as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; nonces.&lt;/p&gt;

&lt;p&gt;Next, the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; key will be encrypted using the first key and nonce. The first key is then encrypted using the second key and nonce that have been encrypted.&lt;/p&gt;

&lt;p&gt;The elliptic-curve Diffie–Hellman (ECDH) private key for the local machine is considered to be this encrypted first key. Using the code contained in &lt;a href=&quot;https://github.com/kokke/tiny-ECDH-c&quot;&gt;this ECDH library&lt;/a&gt;, Babuk will now build a local ECDH public key based on the private key that was provided.&lt;/p&gt;

&lt;p&gt;After that, it will produce a shared secret by utilizing the local private key and the author’s public key that has been hard-coded.&lt;/p&gt;

&lt;p&gt;This commonly known fact is hashed with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHA256&lt;/code&gt; technique to produce two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChaCha8&lt;/code&gt; keys. These keys are subsequently utilized in the process of encrypting files.&lt;/p&gt;

&lt;p&gt;In this report, we would like to dwell in more detail on the cryptographic logic of our ransomware family. So, in order to understand the work of the ransomware a little deeper, we will give a small theoretical definition.&lt;/p&gt;

&lt;h3 id=&quot;ecc&quot;&gt;ECC&lt;/h3&gt;

&lt;p&gt;Babuk Ransomware is a sophisticated ransomware compiled for several platforms, uses an Elliptic Curve Algorithm (Montgomery Algorithm) to build the encryption keys.&lt;/p&gt;

&lt;p&gt;Elliptic curve cryptography (ECC) is an approach to public key cryptography based on the algebraic structure of elliptic curves over finite fields. ECC requires smaller keys compared to non-elliptic curve cryptography (based on plain Galois fields) to provide equivalent security.&lt;/p&gt;

&lt;p&gt;The Montgomery algorithm is an efficient method for performing the point multiplication operation that is at the heart of most elliptic curve cryptographic algorithms.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Initialization:&lt;/em&gt; - Two parties agree on a global elliptic curve and a base point on the curve. This base point is chosen such that when it is repeatedly added to itself, the resultant points “wrap around” the curve instead of marching off to infinity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Key Generation:&lt;/em&gt; - Each party generates a private key, which is a random integer, and a public key, which is the base point added to itself private key number of times. Because the operation is computationally difficult (one-way), the private key cannot be feasibly calculated from the public key.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Encryption:&lt;/em&gt; - To encrypt a message, a party must first translate the message into a point on the curve. They then generate a random integer, and produce two points: the base point added to itself random integer number of times, and the message point added to the other party’s public key random integer number of times.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Decryption:&lt;/em&gt; - The receiving party multiplies the first point by their own private key, which results in a new point. They then subtract the new point from the second point to retrieve the original message point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elliptic curves over real numbers and the group law&lt;/strong&gt; - Elliptic curves over real numbers are curves defined by the equation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y^2 = x^3 + ax + b&lt;/code&gt;. In this equation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; are constants that determine the specific shape of the curve. The curves have a property we call the “group law” that allows us to “add” points on the curve together to get a third point on the curve. This addition usually doesn’t match our normal idea of addition, but it has some similar properties, like being commutative and associative.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elliptic curves over finite fields and the discrete logarithm problem&lt;/strong&gt; - When we talk about elliptic curves in cryptography, we usually mean elliptic curves over finite fields. A finite field is a set with a finite number of elements and two operations that have properties of addition and multiplication. For example, the field of two elements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{0, 1}&lt;/code&gt; with the usual operations of addition and multiplication modulo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; is a finite field. The discrete logarithm problem on elliptic curves over finite fields forms the basis for the security of elliptic curve cryptography.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key pair generation and two ECC algorithms: ECDH and ECDSA&lt;/strong&gt; - Key pair generation in ECC starts with choosing an elliptic curve and a point on that curve. Then a random number is generated, which serves as the private key. To get the corresponding public key, the private key is “multiplied” (using the group law we talked about) with the chosen point on the curve. The result is another point on the curve, which is the public key.&lt;/p&gt;

&lt;p&gt;ECDH (Elliptic Curve Diffie-Hellman) and ECDSA (Elliptic Curve Digital Signature Algorithm) are two common cryptographic algorithms that use ECC. ECDH is a key exchange protocol, and ECDSA is a digital signature protocol. They are similar to the original Diffie-Hellman and DSA protocols, but they use operations on elliptic curves instead of operations in the multiplicative group of integers modulo p.&lt;/p&gt;

&lt;p&gt;Implementing elliptic curve cryptography from scratch is a complex task and beyond the scope of this report due to the amount of code involved and the level of mathematical detail required. However, we can guide you on how to use existing libraries to perform operations related to elliptic curves.&lt;/p&gt;

&lt;p&gt;OpenSSL is a widely-used and comprehensive library that includes support for elliptic curve cryptography. Here is an example on how you can generate a pair of keys, perform ECDH key exchange, and create a signature using ECDSA.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;openssl/evp.h&amp;gt;
#include &amp;lt;openssl/ec.h&amp;gt;
#include &amp;lt;openssl/ecdh.h&amp;gt;
#include &amp;lt;openssl/ecdsa.h&amp;gt;
#include &amp;lt;openssl/rand.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Generate two keys for ECDH key exchange. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVP_PKEY_EC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_keygen_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_set_ec_paramgen_curve_nid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NID_X9_62_prime256v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_keygen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_keygen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Derive the shared secret. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive_set_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Swap the keys and derive the shared secret again. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive_set_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_derive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_CTX_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Now we have two shared secrets that should be equal. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_len2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_len1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Create a signature using ECDSA. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EC_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EVP_PKEY_get1_EC_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RAND_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Get a random &quot;message&quot;. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ECDSA_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ECDSA_sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Verify the signature. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ECDSA_verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Clean up. */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVP_PKEY_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkey2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EC_KEY_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eckey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The example above generates two keys for ECDH, derives the shared secret from both keys (which should be equal), creates a random message and a signature for it, and verifies the signature, and would be compiled with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc crypto_hack.c &lt;span class=&quot;nt&quot;&gt;-lssl&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lcrypto&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; ./crypto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;montgomery-ladder-for-ecc&quot;&gt;Montgomery Ladder for ECC&lt;/h3&gt;

&lt;p&gt;The Montgomery Ladder technique, named after its creator &lt;a href=&quot;https://en.wikipedia.org/wiki/Peter_Montgomery_(mathematician)&quot;&gt;Peter Montgomery&lt;/a&gt;, is an algorithm used to perform the scalar multiplication operation in ECC. The main advantage of the Montgomery ladder is its resistance to simple power analysis and timing attacks, due to its regular, identical sequence of operations for each bit in the key.&lt;/p&gt;

&lt;p&gt;Here’s a step-by-step process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initialize two points &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R1&lt;/code&gt; on the curve such that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0 = 0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R1 = P&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; is the point being multiplied.&lt;/li&gt;
  &lt;li&gt;For each bit in the key, starting with the most significant and moving to the least significant: If the bit is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, perform the operation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0 = R0 + R1, R1 = 2 * R1&lt;/code&gt;. If the bit is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, perform the operation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R1 = R0 + R1, R0 = 2 * R0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;At the end of this process, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R0&lt;/code&gt; will contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kP&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can provide a basic example of an implementation of ECC point addition and doubling. This code doesn’t implement Montgomery multiplication, but will give you an idea of how ECC works. This is a simplified version and for actual cryptographic applications, a more robust and secure version is needed:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EllipticCurve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;EllipticCurve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doublePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EllipticCurve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Point Addition: (&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doublePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Point Doubling: (&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also we can provide a simple C++ code example of a Montgomery Multiplication. &lt;em&gt;Montgomery multiplication&lt;/em&gt; is a method for multiplying two integers modulo a positive integer:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cmath&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;montgomery_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;montgomery_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1ULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;xR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;montgomery_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;montgomery_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;montgomery_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;montgomery_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// outputs: 8&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Path traversing logic&lt;/strong&gt; - In order to explore and encrypt files, Babuk employs a process known as recursion, as was just mentioned. It navigates through each directory by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindFirstFileW&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindNextFileW&lt;/code&gt; methods in order to search for files and subdirectories.&lt;/p&gt;

&lt;p&gt;When it comes across a directory, it calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_encrypt&lt;/code&gt; method multiple times in a recursive manner. However, because Babuk only goes down &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16&lt;/code&gt; directory layers deep, there is a possibility that it might not encrypt each and every folder on the drive in order to save time.&lt;/p&gt;

&lt;p&gt;When it comes across a file, it will perform a check to see if the file name is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;How To Restore Your data.txt&lt;/code&gt; or if the file extension is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__NIST_K571__&lt;/code&gt;. This is done to prevent it from encrypting the ransom note or the data that have already been encrypted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5/2023-06-15_20-05.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;babuk-decryption&quot;&gt;Babuk decryption&lt;/h3&gt;

&lt;p&gt;In order for Babuk to be able to decrypt files, the local public key is saved in the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecdh_pub_k.bin&lt;/code&gt;, which is located in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APPDATA&lt;/code&gt; folder, something like this re-implementation:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;GetEnvironmentVariableW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;APPDATA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubkeypath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lstrcatW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pubkeypath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;L&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ecdh_pub_k.bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Killing processes that are using files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a manner that is analogous to that of the ransomware known as Conti or REvil, Babuk employs the Windows Restart Manager to end any process that is consuming files. This makes sure that there is nothing that can stop it from opening the files and encrypting them:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RmStartSession&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RmRegisterResources&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RmGetList&lt;/code&gt; are the calls that must be made in order to fulfill this goal of retrieving a list of processes that are utilizing a particular file. Babuk will attempt to terminate the process by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TerminateProcess&lt;/code&gt; if the process in question is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explorer.exe&lt;/code&gt; or a critical process.&lt;/p&gt;

&lt;h3 id=&quot;utils&quot;&gt;Utils&lt;/h3&gt;

&lt;p&gt;Also re-implementing some utilities for tricks used in Babuk ransomware.&lt;/p&gt;

&lt;p&gt;Checks if the process is running on a 64 bit machine:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myIsWow64Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bIsWow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;HMODULE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetModuleHandleA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kernel32.dll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pdef_IsWow64Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsWow64Process_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdef_IsWow64Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;IsWow64Process&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsWow64Process_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsWow64Process_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCurrentProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bIsWow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bIsWow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bIsWow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HeapAlloc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HeapFree&lt;/code&gt; wrappers:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myHeapAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EnterCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpMem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeapAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAP_ZERO_MEMORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LeaveCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myHeapFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EnterCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HeapFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LeaveCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;iocs&quot;&gt;IOCs&lt;/h3&gt;

&lt;p&gt;MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e10713a4a5f635767dcd54d609bed977&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;320d799beef673a98481757b2ff7e3463ce67916&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8203c2f00ecd3ae960cb3247a7d7bfb35e55c38939607c85dbdb5c92f0495fa9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;IPs and domains:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20.99.184.37&lt;/code&gt;   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;239.255.255.250&lt;/code&gt;  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;babukq4e2p4wu4iq.onion&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;yara-rule&quot;&gt;Yara rule&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;rule BabukRansom {&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;description = &quot;YARA rule for Babuk Ransomware&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;reference = &quot;https://mssplab.github.io/threat-hunting/2023/06/15/malware-analysis-babuk.html&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;author = &quot;@cPeterr&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;date = &quot;2021-01-03&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;rule_version = &quot;v1&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;malware_type = &quot;ransomware&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;tlp = &quot;white&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$lanstr1 = &quot;-lanfirst&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$lanstr2 = &quot;-lansecond&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$lanstr3 = &quot;-nolan&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$str1 = &quot;BABUK LOCKER&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$str2 = &quot;.__NIST_K571__&quot; wide&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$str3 = &quot;How To Restore Your Files.txt&quot; wide&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;$str4 = &quot;ecdh_pub_k.bin&quot; wide&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;all of ($str*) and all of ($lanstr*)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Babuk&lt;/em&gt; announced their “retirement” at the end of April 2021. However, this does not mean that the threat has disappeared completely. There is concern that members of the group may continue their activities within other groups or under new names. And although the samples we studied were two years old, it is of particular interest to use elliptic curve cryptography in ransomware.&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/madiyar-mukhamadiyev-306b37239/&quot;&gt;@mgmadr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://attack.mitre.org/software/S0638/&quot;&gt;MITRE ATT&amp;amp;CK: Babuk&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://github.com/kokke/tiny-ECDH-c&quot;&gt;https://github.com/kokke/tiny-ECDH-c&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Salsa20&quot;&gt;Salsa20 wikipedia&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Peter_Montgomery_(mathematician)&quot;&gt;Peter Montgomery&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://app.any.run/tasks/2eaffd86-79a7-4752-835b-b7815f9cd44b/&quot;&gt;Babuk sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">Babuk is a ransomware family that was first discovered in early 2021. It quickly became infamous, especially among corporate networks, for its ability to quickly encrypt files and demand ransom. However, the decisive moment in its development was the leak of the source code, which subsequently contributed to the spread of new ransomware variants.</summary></entry><entry><title type="html">Malware analysis report: SNOWYAMBER (+APT29 related malwares)</title><link href="http://localhost:4000/threat-hunting/2023/06/02/malware-analysis-apt29.html" rel="alternate" type="text/html" title="Malware analysis report: SNOWYAMBER (+APT29 related malwares)" /><published>2023-06-02T05:00:00+03:00</published><updated>2023-06-02T05:00:00+03:00</updated><id>http://localhost:4000/threat-hunting/2023/06/02/malware-analysis-apt29</id><content type="html" xml:base="http://localhost:4000/threat-hunting/2023/06/02/malware-analysis-apt29.html">&lt;p&gt;This report provides a comprehensive analysis of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SNOWYAMBER&lt;/code&gt; dropper, and it’s modifications, a sophisticated piece of malware attributed to the Advanced Persistent Threat group &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APT29&lt;/code&gt;. The group is believed to be tied to the Russian government and has been linked to numerous cyber espionage operations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/APT29.png&quot; alt=&quot;apt29&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;threat-actor&quot;&gt;Threat actor&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;APT29&lt;/strong&gt;, also known as The Dukes or Cozy Bear, is a highly sophisticated and well-resourced cyber espionage group believed to be associated with the Russian government. It has been operating since at least 2008.&lt;/p&gt;

&lt;h3 id=&quot;target&quot;&gt;Target&lt;/h3&gt;

&lt;p&gt;While the group’s exact location is unknown, multiple cybersecurity research groups and government agencies attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APT29&lt;/code&gt; to Russia. Their targets are typically spread across the globe, with a specific focus on government organizations, think-tanks, healthcare organizations, and energy sectors.&lt;/p&gt;

&lt;h3 id=&quot;ttps&quot;&gt;TTPs&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;APT29&lt;/em&gt; is known for its persistent and evolving tactics, which include a combination of advanced techniques and procedures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Spear-Phishing:&lt;/em&gt; APT29 commonly utilizes spear-phishing campaigns for initial compromise. These usually involve emails with either a malicious attachment or a link to a malicious website. Their spear-phishing attacks often involve the use of legitimate web services, such as Google accounts, to host their payload and seem less suspicious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Use of Zero-days and Exploits:&lt;/em&gt; The group is known to use zero-day exploits as well as known vulnerabilities to infiltrate networks. They were known to exploit vulnerabilities such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2017-11292&lt;/code&gt; (Adobe Flash), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2017-8759&lt;/code&gt; (.NET Framework), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2017-0199&lt;/code&gt; (Microsoft Office/WordPad).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Living-off-the-Land Tactics:&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APT29&lt;/code&gt; frequently employs “living-off-the-land” tactics, where they use legitimate system tools and processes to hide their activities and maintain persistence. For instance, they have been known to use PowerShell for scripting, WMI for persistence, and PsExec for lateral movement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Custom Malware:&lt;/em&gt; The group uses a variety of custom backdoors and droppers, including but not limited to MiniDuke, CosmicDuke, OnionDuke, and CozyDuke. More recently, they have been associated with the WellMess and WellMail malware.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Stealth and Long-term Persistence:&lt;/em&gt; APT29 is known for its stealthy operations and ability to maintain a long-term presence on infiltrated networks without detection. They often do so by limiting their activities during the working hours of the target’s local time zone to mimic legitimate users and avoid raising alerts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Data Exfiltration:&lt;/em&gt; APT29 is known for extracting sensitive information from the infiltrated networks. They often do this very slowly and cautiously to avoid detection. The group is believed to be interested in gathering intelligence related to foreign policy, defense, international relations, and similar topics.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;malware-features&quot;&gt;Malware features&lt;/h3&gt;

&lt;p&gt;Through our analysis, we have identified the following notable features of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SNOWYAMBER&lt;/code&gt; dropper:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Infection capabilities:&lt;/em&gt; The malware is typically introduced to the victim’s machine via spear phishing, hiding in documents that prompt the user to enable macros. (High Confidence)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Capacity for self-preservation:&lt;/em&gt; The malware employs anti-analysis and persistence mechanisms, which include obfuscation techniques, disabling security tools, and creating Registry keys to survive reboots. (High Confidence)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Diffusion mechanism:&lt;/em&gt; The dropper, upon execution, deploys additional payloads on the infected machine, and may also propagate laterally within the network. (Medium Confidence)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Data exfiltration capabilities:&lt;/em&gt; The malware appears capable of collecting system information and sending it to a Command and Control (C2) server. (High Confidence)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;C2 mechanisms:&lt;/em&gt; The malware uses encrypted HTTP requests for C2 communication. (High Confidence)&lt;/p&gt;

&lt;h3 id=&quot;identification&quot;&gt;Identification&lt;/h3&gt;

&lt;p&gt;Among the malware samples analysed, the most interesting are following.&lt;/p&gt;

&lt;p&gt;Four samples are being investigated:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample.exe&lt;/em&gt; - this file is worked for injection:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;205824 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;109f05770bf8550f71b39ceaffc6e42e&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;72b57b47649f145ba341420fa0a4624810c011d9&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;287543c235cf68695373d367144c51a0236879e614e8ea4634b82e5336785edc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, check our sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/287543c235cf68695373d367144c51a0236879e614e8ea4634b82e5336785edc/detection&quot;&gt;https://www.virustotal.com/gui/file/287543c235cf68695373d367144c51a0236879e614e8ea4634b82e5336785edc/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_13-21.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, 2 of 70 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This sample is written in C++ and uses multiple malware development tricks: WinAPI functions call by hash, string obfuscation and encryption, time distortion.&lt;/p&gt;

&lt;h3 id=&quot;static-analysis&quot;&gt;Static analysis&lt;/h3&gt;

&lt;p&gt;The specified sample is a PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-23.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-25.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; for looking metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-26.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we see that file timestamp is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2023-02-25 22:07:22+03.00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Executable sample is not packed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upx&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upx &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-28.png&quot; alt=&quot;upx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What about Shannon entropy of the sample:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-30.png&quot; alt=&quot;shannon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analysze with DIE says that the compiler is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft Visual Studio 2019&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_18-26.png&quot; alt=&quot;die&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-analysis&quot;&gt;dynamic analysis&lt;/h3&gt;

&lt;p&gt;Contacted IP addresses is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_18-37.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main logic starts with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int start&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Then arbitrary computations are performed: this is a popular sandbox bypass trick. And run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; logic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_01-59.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_16-30.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also use WinAPI functions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateTimerQueue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateTimerQueueTimer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeleteTimerQueueEx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-06.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_17-16.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here use an event object to track the TimeRoutine execution, create the timer queue, then set a timer to call the timer routine in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt; seconds.&lt;/p&gt;

&lt;p&gt;This implementation sets up asynchronous timers using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CreateTimerQueueTimer&lt;/code&gt;. Each executes one after the other and does the following tasks: Wait a specific time period.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_02-03.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When executed, the injector reads the resource, decrypts it by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RC4&lt;/code&gt; algorithm, allocates memory, copies sections, processes relocks, and transfers control to the entry point.&lt;/p&gt;

&lt;p&gt;What about injection technique. It’s PE injection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_01-51.png&quot; alt=&quot;dynamic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All NT API functions are replaced by calling equivalent syscalls from &lt;a href=&quot;https://github.com/klezVirus/SysWhispers3&quot;&gt;https://github.com/klezVirus/SysWhispers3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample2.exe&lt;/em&gt; - this sample is an encryptor:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;214528 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;107dae5b9c61c962e0d604cd70a1d8ae&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3752be6b162bacb0d7c12b6d122c9dbaf3ad6223&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a89150f159c1c9d053365ac38625f783642bc4c16a693cb106d715819acc677b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check it via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/a89150f159c1c9d053365ac38625f783642bc4c16a693cb106d715819acc677b/detection&quot;&gt;https://www.virustotal.com/gui/file/a89150f159c1c9d053365ac38625f783642bc4c16a693cb106d715819acc677b/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_15-53.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, 2 of 70 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This encryptor encrypts the payload with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RC4&lt;/code&gt; algorithm, then the result is attached to the injector with the resource.&lt;/p&gt;

&lt;p&gt;Encryptor use 2 params: Input file and output file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_01-17.png&quot; alt=&quot;enc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_02-56.png&quot; alt=&quot;enc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Classic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RC4&lt;/code&gt; algorithm:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_03-01.png&quot; alt=&quot;enc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a simple reimplementation this logic:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rc4crypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PBYTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeapAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeapAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to be used in swaping&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* S &amp;amp; K initialization */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* State Permutation */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Swap S[i] &amp;amp; S[j]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// reintializing j to reuse it&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using %256 to avoid exceed the array limit&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using %256 to avoid exceed the array limit&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Swap S[i] &amp;amp; S[j]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// XOR generated S[t] with Byte from the plaintext / cipher and append each Encrypted/Decrypted byte to result array&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;HeapFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HeapFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcessHeap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The encryption/decryption key is:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C2B55923&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;sample3.exe&lt;/em&gt; - this sample plays the role of a reverse shell:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9216 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;68d957f5fbb2f2078da9059995ece969&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;545ccdb7e68c6cef6271698c0815db33625aae03&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6dc1393ccacd031fa0141aa312d55deb2552a7a95c3ae21856c82beb21a554bd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, check our sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/6dc1393ccacd031fa0141aa312d55deb2552a7a95c3ae21856c82beb21a554bd/detection&quot;&gt;https://www.virustotal.com/gui/file/6dc1393ccacd031fa0141aa312d55deb2552a7a95c3ae21856c82beb21a554bd/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-02_06-30.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, 14 of 71 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More of them detect file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gen:Heur.Loregun.19&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Contacted IP addresses:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_01-39.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The logic of this sample is pretty simple: create a socket, listen on it, transfer all I/O to the socket.&lt;/p&gt;

&lt;h3 id=&quot;malware-evasion-tricks&quot;&gt;Malware evasion tricks&lt;/h3&gt;

&lt;p&gt;RVA to offset:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_02-22.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We restored WinAPI hashing logic:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define UPCASE(wch)                     \
  (((wch) &amp;gt;= 'a') &amp;amp;&amp;amp; ((wch) &amp;lt;= 'z') ? \
      (wch)                           \
  :                                   \
      ((wch) + ('a'-'A'))             \
  )                                   
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HashA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PCSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65599&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UPCASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HashW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PCWSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65599&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UPCASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TmpHashValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and hashing table:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_02-11.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mh&quot;&gt;0x8ba508f3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//AmsiScanBuffer&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xc4f4eb06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//AmsiOpenSession&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xea48872c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//CloseHandle&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x3bc77547&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//closesocket&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x96d3ba46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//connect&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x8278b698&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//CreateMutexW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x609502e8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//CreateProcessW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x1347fdfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//ExitProcess&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x27bcb342&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//ExpandEnvironmentStringsW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x5366ed60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//FreeAddrInfoW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x39c8604e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//GetAddrInfoW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x26f75d64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//GetCurrentThreadId&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x55e2cac2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//GetFileAttributesW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xab26d610&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//GetLastError&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xbd71d0e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//LoadLibraryA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xbd71d0ce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//LoadLibraryW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x23dcad1c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcatA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xd84484d6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcpyA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x23dcad6a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcatW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xdfc07835&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcmpiA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xdfc07803&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcmpiW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xd844bb3c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrcpyW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x468d52ab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrlenW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x468d525d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//lstrlenA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xf94e8b9f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//MessageBoxW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x326d0bc9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//MultiByteToWideChar&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x11983657&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//NtTraceEvent&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x9293ab58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//OutputDebugStringW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xc83db0b4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//ReleaseMutex&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xbdcac89f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlAllocateHeap&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x3c3e5b30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlCompareMemory&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x1dc948b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlMoveMemory&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x3519f2b9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlDosPathNameToNtPathName_U&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xce521091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlExitUserThread&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x4ead0e2e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlFreeHeap&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xfc4d07c0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlGetVersion&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xe24742d8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlInitUnicodeString&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xb1d4a311&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlNtStatusToDosError&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x819c55ff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//RtlZeroMemory&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xd66bb51c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//SetLastError&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x0f8a6e1b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Sleep&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x036a4566&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualAlloc&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x0033e9b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualAllocEx&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xc7433c7b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualFree&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xaa9a1e06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualFreeEx&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x61462271&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//VirtualQuery&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x9f79559c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WaitForMultipleObjects&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x4b570e37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WaitForSingleObject&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x85729171&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WideCharToMultiByte&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x874700d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WSACleanup&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x90b71e53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WSASocketW&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xa48ed094&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//WSAStartup&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xfdb3b358&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//wvsprintfA&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0xfdb3b3a6&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//wvsprintfW&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;sample4.exe&lt;/em&gt; - this sample is SNOWYAMBER DLL&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;270336 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d0efe94196b4923eb644ec0b53d226cc&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c938934c0f5304541087313382aee163e0c5239c&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;381a3c6c7e119f58dfde6f03a9890353a20badfa1bfa7c38ede62c6b0692103c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Checking this sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/381a3c6c7e119f58dfde6f03a9890353a20badfa1bfa7c38ede62c6b0692103c/details&quot;&gt;https://www.virustotal.com/gui/file/381a3c6c7e119f58dfde6f03a9890353a20badfa1bfa7c38ede62c6b0692103c/details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4/2023-06-03_07-02.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;51 of 69 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Detected as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trojan.Downloader.Dukes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This sample is well analyzed, the technical details can be viewed &lt;a href=&quot;https://www.gov.pl/attachment/6e085a2c-ac05-4b62-9423-5d6e9ef730bf&quot;&gt;here&lt;/a&gt; or &lt;a href=&quot;https://samples.vx-underground.org/APTs/2023/2023.04.13/Paper/SNOWYAMBER_.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will just focus on the fact that this sample uses an interesting string obfuscation technique: using open-source library &lt;a href=&quot;https://github.com/adamyaxley/Obfuscate&quot;&gt;https://github.com/adamyaxley/Obfuscate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also used some Conti ransomware tricks like using &lt;a href=&quot;https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp&quot;&gt;Murmurhash&lt;/a&gt; algorithm.&lt;/p&gt;

&lt;p&gt;As we wrote earlier, we believe that the Dukes are a well-resourced, highly dedicated, and well-organized cyberespionage group that has been working for the Russian Federation since at least 2008 to gather intelligence in support of foreign and security policy decisions.&lt;/p&gt;

&lt;p&gt;The Dukes target predominantly Western governments and related organizations, including government ministries and agencies, political think tanks, and government subcontractors. Their targets have also included governments of Commonwealth of Independent States members, governments of Asia, Africa, and the Middle East, organizations associated with Chechen extremism, and Russian speakers involved in the illegal trade of controlled substances and narcotics.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MiniDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CosmicDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OnionDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CozyDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CloudDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeaDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HammerDuke&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PinchDuke&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeminiDuke&lt;/code&gt; are examples of the extensive arsenal of malware toolsets utilized by the Dukes. In recent years, the Dukes have evidently conducted large-scale spear-phishing campaigns biannually against hundreds or thousands of recipients affiliated with government institutions and affiliated organizations.&lt;/p&gt;

&lt;h3 id=&quot;iocs&quot;&gt;IOCs&lt;/h3&gt;

&lt;h3 id=&quot;sigma-rule&quot;&gt;Sigma rule&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Remote Thread Creation In Uncommon Target Image&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;a1a144b7-5c9b-4853-a559-2172be8d4a03&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;related&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;f016c716-754a-467f-a39e-63c06f773987&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;obsoletes&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;experimental&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Detects uncommon target processes for remote thread creation&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;references&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://blog.redbluepurple.io/offensive-research/bypassing-injection-detection&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Florian Roth (Nextron Systems)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2022/03/16&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;modified&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2023/05/05&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;attack.defense_evasion&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;attack.privilege_escalation&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;attack.t1055.003&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;logsource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;create_remote_thread&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;detection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;TargetImage|endswith&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\calc.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\calculator.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\explorer.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\mspaint.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\notepad.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\ping.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\sethc.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\spoolsv.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\wordpad.exe'&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\write.exe'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filter_optional_aurora_1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;StartFunction&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;EtwpNotificationThread'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filter_optional_aurora_2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;SourceImage|contains&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;process'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filter_main_spoolsv&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;SourceImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C:\Windows\System32\csrss.exe'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;TargetImage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C:\Windows\System32\spoolsv.exe'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;selection and not 1 of filter_main_* and not 1 of filter_optional_*&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;falsepositives&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Unknown&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;high&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Running code in the context of another process may allow a threat actor to access the process’s memory, system/network resources, and possibly elevated privileges. PE injection is commonly used by malware for persistent infection and evasion of detection.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;LoadPE&lt;/em&gt; Injection is a technique that involves loading a PE file into the memory of a process. In a typical LoadPE Injection scenario, the following steps occur:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The malware allocates space in its own process for the PE file.&lt;/li&gt;
  &lt;li&gt;The malware reads the PE file from disk into the allocated space.&lt;/li&gt;
  &lt;li&gt;The malware resolves import addresses for the PE file.&lt;/li&gt;
  &lt;li&gt;The malware creates a remote thread in a target process.&lt;/li&gt;
  &lt;li&gt;The malware injects the PE file into the address space of the target process.&lt;/li&gt;
  &lt;li&gt;The malware initiates execution of the injected PE file in the target process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This technique allows malware to avoid many behavioral detection strategies. It allows the malicious PE to be executed without ever being directly loaded or written to the disk, making it more difficult for traditional antivirus software to detect.&lt;/p&gt;

&lt;p&gt;As we can see, the technique is not new but is still used in 2023.&lt;/p&gt;

&lt;p&gt;We believe that this is either a new modification of &lt;em&gt;Snowyamber&lt;/em&gt; or a new Conti style malware family, since any Russian related groups use ContiLeaks. ContiLeaks is a turning point in the cybercrime ecosystem, and in this case, we can expect a lot of changes in how cybercriminal organizations operate.&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://attack.mitre.org/groups/G0016/&quot;&gt;APT29&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://samples.vx-underground.org/APTs/2023/2023.04.13/Paper/SNOWYAMBER_.pdf&quot;&gt;SNOWYAMBER Malware Analysis Report&lt;/a&gt;      &lt;br /&gt;
&lt;a href=&quot;https://github.com/SigmaHQ/sigma&quot;&gt;https://github.com/SigmaHQ/sigma&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1055/&quot;&gt;Process Injection&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://github.com/adamyaxley/Obfuscate&quot;&gt;https://github.com/adamyaxley/Obfuscate&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://cocomelonc.github.io/investigation/2022/03/27/malw-inv-conti-1.html&quot;&gt;Conti ransomware source code investigation - part 1.&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://cocomelonc.github.io/investigation/2022/04/11/malw-inv-conti-2.html&quot;&gt;Conti ransomware source code investigation - part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">This report provides a comprehensive analysis of the SNOWYAMBER dropper, and it’s modifications, a sophisticated piece of malware attributed to the Advanced Persistent Threat group APT29. The group is believed to be tied to the Russian government and has been linked to numerous cyber espionage operations.</summary></entry><entry><title type="html">Malware source code investigation: AsyncRAT</title><link href="http://localhost:4000/threat-hunting/2023/05/19/malware-src-asyncrat.html" rel="alternate" type="text/html" title="Malware source code investigation: AsyncRAT" /><published>2023-05-19T05:00:00+03:00</published><updated>2023-05-19T05:00:00+03:00</updated><id>http://localhost:4000/threat-hunting/2023/05/19/malware-src-asyncrat</id><content type="html" xml:base="http://localhost:4000/threat-hunting/2023/05/19/malware-src-asyncrat.html">&lt;p&gt;AsyncRAT is a Remote Access Trojan (RAT) designed to remotely monitor and control infected systems. It is free, open-source, and often used by cybercriminals for malicious purposes, such as stealing sensitive information, installing more malware, or performing DDoS attacks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/asyncrat.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AsyncRAT&lt;/strong&gt; was published as an open source remote administration tool project on GitHub in January 2019.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_12-39.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; is a regular malware product and set of tools utilized by attackers and APT organizations. Threat actors and adversaries utilized a variety of intriguing script injectors and spear phishing attachments to deliver AsyncRAT to targeted hosts or networks across multiple campaigns.&lt;/p&gt;

&lt;p&gt;In this small research we are detailed investigate the source code of &lt;em&gt;AsyncRAT&lt;/em&gt; and highlights the main features.&lt;/p&gt;

&lt;p&gt;AsyncRAT has been included in &lt;a href=&quot;https://any.run/malware-trends/&quot;&gt;app.any.run’s weekly TOP 10&lt;/a&gt; malware trends tracker for the past few months.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_12-41.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_12-42.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;client-server-architecture&quot;&gt;Client-Server Architecture&lt;/h3&gt;

&lt;p&gt;When executed, the &lt;em&gt;AsyncRat GUI&lt;/em&gt; allows criminals to control the infected machine. The code is open-source and can be modified to suit the purposes of criminals:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-24.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; implements a client-server architecture. The client side is the infected machine, whereas the server side is the attacker-operated control interface. The client establishes a connection with the server using asynchronous TCP sockets, which permits multiple simultaneous connections without interference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_13-58.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;core-functionalities&quot;&gt;Core Functionalities&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; includes several functionalities that permit a high degree of control over infected systems:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remote Desktop&lt;/strong&gt; - The client captures screenshots of the desktop and sends them to the server, allowing the attacker to see the victim’s activities in real time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt;’s built-in libraries to capture screenshots from the victim’s machine. The following is a more technical breakdown of how this feature works in the &lt;em&gt;AsyncRAT&lt;/em&gt; client.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;AsyncRAT&lt;/em&gt;’s source code, you would find a function responsible for capturing screenshots. This function is typically invoked when the server sends a specific command to the client.&lt;/p&gt;

&lt;p&gt;To capture the screenshot, &lt;em&gt;AsyncRAT&lt;/em&gt; leverages the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Drawing&lt;/code&gt; namespace in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt;, which provides access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GDI+&lt;/code&gt; basic graphics functionality. More specifically, it uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics&lt;/code&gt; classes to capture and store the screenshot(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Plugin/Options/Options/Handler/HandleThumbnails.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-02.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This code does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Creates a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt; object with the same size as the screen. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Screen.PrimaryScreen.Bounds&lt;/code&gt; property is used to determine the size of the screen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics&lt;/code&gt; object from the bitmap. This object is used to perform the screenshot operation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics.CopyFromScreen&lt;/code&gt; method to take the screenshot. This method copies the pixels from the screen and stores them in the bitmap.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the screenshot is captured and stored in the bitmap, &lt;em&gt;AsyncRAT&lt;/em&gt; then usually converts the bitmap to a byte array and sends it to the server. The server can then reconstruct the bitmap from the byte array to view the screenshot. It’s worth noting that the screenshot is usually compressed before being sent to reduce network usage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keylogger&lt;/strong&gt; - AsyncRAT logs keystrokes and periodically sends the data to the server. This feature can capture sensitive information like passwords and credit card numbers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; captures keystrokes by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetWindowsHookEx&lt;/code&gt; function, which is part of the Windows API. This function allows the application to install a “hook” that monitors the message traffic in the system and retrieves specific types of messages, such as keypresses.&lt;/p&gt;

&lt;p&gt;The following is a code of how &lt;em&gt;AsyncRAT&lt;/em&gt; implement a keylogger in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C#&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetWindowsHookEx&lt;/code&gt; function (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/LimeLogger/LimeLogger/Packet.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-09.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetHook&lt;/code&gt; function installs the keyboard hook by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetWindowsHookEx&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LowLevelKeyboardProc&lt;/code&gt; delegate. The hook is then uninstalled using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnsetHook&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-11.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Explorer&lt;/strong&gt; - The client can navigate the filesystem, upload files to the server, download files from the server, and execute files.&lt;/p&gt;

&lt;p&gt;To accomplish these tasks, &lt;em&gt;AsyncRAT&lt;/em&gt; uses standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt; libraries. Let’s break down each function separately.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Navigating the File System&lt;/em&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.IO&lt;/code&gt; namespace in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt; contains classes for manipulating files and directories. For example, &lt;em&gt;AsyncRAT&lt;/em&gt; retrieve a list of files in a directory using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Directory.GetFiles&lt;/code&gt; method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/FileSearcher/FileSearcher/Packet.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-19.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And get subdirectories with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Directory.GetDirectories&lt;/code&gt; method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/FileManager/FileManager/Handler/FileManager.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-20.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Uploading Files To the Server&lt;/em&gt;. To read the contents of a file, &lt;em&gt;AsyncRAT&lt;/em&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.ReadAllBytes&lt;/code&gt; method, which reads a file and returns its contents as a byte array (for example in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/FileSearcher/FileSearcher/Packet.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-27.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Downloading Files from the Server&lt;/em&gt;. When the server sends a file, it is usually in the form of a byte array. The client can save this byte array to a file using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.WriteAllBytes&lt;/code&gt; method (for example in: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Server/HandlePacket/HandleFileSearcher.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-31.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Executing Files&lt;/em&gt;. To execute a file, &lt;em&gt;AsyncRAT&lt;/em&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.Start&lt;/code&gt; method from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics&lt;/code&gt; namespace (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/FileManager/FileManager/Handler/FileManager.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-34.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process Manager&lt;/strong&gt; - The client retrieves a list of running processes and can kill or start processes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; utilizes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics&lt;/code&gt; namespace in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt; to interact with system processes.
&lt;em&gt;Retrieving a List of Running Processes&lt;/em&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; class in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics&lt;/code&gt; namespace has a static method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetProcesses&lt;/code&gt; that returns an array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; objects, which represent all the processes currently running on the system. Here is how it’s used (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/ProcessManager/ProcessManager/Packet.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-45.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT ProcessId, Name, ExecutablePath FROM Win32_Process&lt;/code&gt; query:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-46.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Starting a Process&lt;/em&gt;. To start a new process, &lt;em&gt;AsyncRAT&lt;/em&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.Start&lt;/code&gt; method, which starts a process resource by specifying the name of an application or document:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_14-49.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that all these operations require sufficient permissions. If the &lt;em&gt;AsyncRAT&lt;/em&gt; client doesn’t have the necessary permissions, these operations will fail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remote Shell&lt;/strong&gt; - The client can execute shell commands from the server, enabling an even greater degree of control.&lt;/p&gt;

&lt;p&gt;The ability to execute shell commands remotely is a powerful feature of &lt;em&gt;AsyncRAT&lt;/em&gt;. This feature allows the attacker to execute virtually any command, as if they were physically present at the victim’s machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; executes shell commands by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Diagnostics.Process&lt;/code&gt; class in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET Framework&lt;/code&gt;. This class provides the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start&lt;/code&gt; method, which can start a new process. To execute a shell command, &lt;em&gt;AsyncRAT&lt;/em&gt; starts a new instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt; with the shell command as a parameter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin/Miscellaneous/Miscellaneous/Handler/HandleShell.cs&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_15-22.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stealth-and-persistence&quot;&gt;Stealth and Persistence&lt;/h3&gt;

&lt;p&gt;To evade detection, &lt;em&gt;AsyncRAT&lt;/em&gt; uses several techniques:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process Injection&lt;/strong&gt; - &lt;em&gt;AsyncRAT&lt;/em&gt; injects its core functionality into a separate process to hide its malicious activities.&lt;/p&gt;

&lt;p&gt;The injector is used to load into the memory the &lt;em&gt;AsyncRAT&lt;/em&gt; file by taking advantage of the &lt;a href=&quot;https://attack.mitre.org/techniques/T1055/012/&quot;&gt;Process Hollowing&lt;/a&gt; technique. As demonstrated, a new thread is created, put in a suspended state (pause), the target file mapped into the memory, and then executed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-06.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_15-57.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anti-Analysis&lt;/strong&gt; - The client employs various anti-analysis techniques, including the detection of virtual machines and sandbox environments.&lt;/p&gt;

&lt;p&gt;Malware often employs anti-analysis techniques to evade detection, avoid being analyzed in a controlled environment, and ultimately to make reverse-engineering more challenging. This includes checks for virtual machines (VMs) and sandbox environments, which are commonly used tools for malware analysis.&lt;/p&gt;

&lt;p&gt;Analyzing the source code of &lt;em&gt;AsyncRAT&lt;/em&gt;, you may find various techniques that it employs to achieve this (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client/Helper/Anti_Analysis.cs&lt;/code&gt;). While specific implementation details could vary depending on the version or variant of the RAT, here’s an example of what these anti-analysis checks might look like in practice.&lt;/p&gt;

&lt;p&gt;Here is how AsyncRAT check for a VM and a sandbox:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-08.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-13.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, just check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sbiedll.dll&lt;/code&gt; is loaded, which is a module of sandboxie sandbox.&lt;/p&gt;

&lt;p&gt;Also check disk size:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-11.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The logic is simple, determine if a compromised host is operating in a malware lab or sandbox by examining the size of its hard drive.&lt;/p&gt;

&lt;p&gt;Another method is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsXP&lt;/code&gt;: check if its process is running in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XP Windows&lt;/code&gt; Operating System:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-12.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check if remote debugger exist:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-14.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following image depicts the code that drops a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bat&lt;/code&gt; script in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%temp%&lt;/code&gt; folder to delete itself as part of a defense evasion technique to clear its trace after execution and drop a copy of itself on the compromised host:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-21.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Persistence&lt;/strong&gt; - The client installs itself to the registry or startup folder to maintain persistence after system reboots.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;AsyncRAT&lt;/em&gt; client will verify that its code executes with administrative permissions. If so, it will add Windows Scheduled Tasks using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schtasks.exe&lt;/code&gt; with the highest runlevel permissions to execute a duplicate of itself, if &lt;em&gt;AsyncRAT&lt;/em&gt; is not running with administrative privileges, it will use Registry Run Key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run&lt;/code&gt; for its persistence:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-28.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;connection-and-control&quot;&gt;Connection and Control&lt;/h3&gt;

&lt;p&gt;On execution, the client initiates a connection to the server. After a successful connection, the client sends detailed system information to the server, including the computer name, user name, operating system, processor, and installed antivirus software. The client also downloads a small &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET&lt;/code&gt; assembly DLL file from the server, which is injected into a newly created process. This is where the &lt;em&gt;AsyncRAT&lt;/em&gt;’s core functionality is executed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; will decrypt its AES encrypted configuration data including the port and C2 IP address that will be used for C2 communication:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-49.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the code snippet for C2 server communication and C2 downloads:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_16-53.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;updating-and-uninstalling&quot;&gt;Updating and Uninstalling&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;AsyncRAT&lt;/em&gt; allows for the updating and uninstalling of the client directly from the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3/2023-05-20_17-03.png&quot; alt=&quot;asyncrat&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The uninstall functionality would typically involve the server sending a command to the client, telling it to remove itself from the infected machine. This might involve deleting the client binary, as well as any other files created by the client. The client might also remove any registry keys it has created, and undo any other changes it has made to the system.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Given its open-source nature and availability on GitHub since January 2019, &lt;em&gt;AsyncRAT&lt;/em&gt; is accessible to a wide range of threat actors, including both individual malicious actors and sophisticated APT groups. This availability, combined with its powerful features, makes it a popular choice for cybercriminals.&lt;/p&gt;

&lt;p&gt;The observed campaigns leveraging spear-phishing attacks and script loaders, such as the one using a Microsoft OneNote attachment to load a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.HTA&lt;/code&gt; file, demonstrate that attackers can employ a variety of methods to deliver &lt;em&gt;AsyncRAT&lt;/em&gt; to targeted hosts or networks. This underlines the importance of a comprehensive security posture, encompassing not just malware detection and removal, but also employee training and robust email security measures to combat spear-phishing attacks.&lt;/p&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/NYAN-x-CAT/AsyncRAT-C-Sharp&quot;&gt;https://github.com/NYAN-x-CAT/AsyncRAT-C-Sharp&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://malpedia.caad.fkie.fraunhofer.de/details/win.asyncrat&quot;&gt;https://malpedia.caad.fkie.fraunhofer.de/details/win.asyncrat&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://twitter.com/anyrun_app/status/1617401778240102400?s=20&amp;amp;t=ED5KEvCMTz8_F2IjR61j8Q&quot;&gt;https://twitter.com/anyrun_app/status/1617401778240102400&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;https://any.run/malware-trends/&quot;&gt;https://any.run/malware-trends/&lt;/a&gt;     &lt;br /&gt;
&lt;a href=&quot;https://attack.mitre.org/techniques/T1055/012/&quot;&gt;MITRE ATT&amp;amp;CK: Process Hollowing&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://research.splunk.com/stories/asyncrat/&quot;&gt;https://research.splunk.com/stories/asyncrat/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">AsyncRAT is a Remote Access Trojan (RAT) designed to remotely monitor and control infected systems. It is free, open-source, and often used by cybercriminals for malicious purposes, such as stealing sensitive information, installing more malware, or performing DDoS attacks.</summary></entry><entry><title type="html">Malware analysis report: WinDealer (LuoYu Threat Group)</title><link href="http://localhost:4000/threat-hunting/2023/05/08/malware-analysis-windealer.html" rel="alternate" type="text/html" title="Malware analysis report: WinDealer (LuoYu Threat Group)" /><published>2023-05-08T05:00:00+03:00</published><updated>2023-05-08T05:00:00+03:00</updated><id>http://localhost:4000/threat-hunting/2023/05/08/malware-analysis-windealer</id><content type="html" xml:base="http://localhost:4000/threat-hunting/2023/05/08/malware-analysis-windealer.html">&lt;p&gt;WinDealer is a type of malware that is used for financial fraud and theft. It is a banking Trojan that is designed to steal sensitive financial information, such as login credentials, credit card numbers, and other personal information from victims’ computers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-05-08_12-08.png&quot; alt=&quot;windealer&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following are the capabilities of the malware:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Manipulation of files and file systems: reading, writing, and deleting files, listing directories, and collecting disk information&lt;/li&gt;
  &lt;li&gt;Information collection: gathering device details, network settings, and/or keyboard layout, listing running processes, installed software, and configuration files of popular messaging services (Skype, QQ, WeChat, and Wangwang);&lt;/li&gt;
  &lt;li&gt;Download and upload random file types; arbitrarily executed commands;&lt;/li&gt;
  &lt;li&gt;System-wide text file and Microsoft Word document search;&lt;/li&gt;
  &lt;li&gt;Screenshot taking;&lt;/li&gt;
  &lt;li&gt;Discovery of networks through ping scan;&lt;/li&gt;
  &lt;li&gt;Backdoor maintenance: enabling or disabling persistence (through the RUN key in the registry) and configuration changes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;threat-actor&quot;&gt;Threat actor&lt;/h3&gt;

&lt;p&gt;LuoYu is a threat group that is believed to be a Chinese state-sponsored hacking group. The group has been active since at least 2011 and is known to target a wide range of industries, including defense, government, telecommunications, and technology.&lt;/p&gt;

&lt;h3 id=&quot;target&quot;&gt;Target&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Geographies and sectors&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chinese subsidiaries of Japanese companies&lt;/li&gt;
  &lt;li&gt;Users of a Chinese private bank&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Industry&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Technology&lt;/li&gt;
  &lt;li&gt;Media&lt;/li&gt;
  &lt;li&gt;Financial&lt;/li&gt;
  &lt;li&gt;Military&lt;/li&gt;
  &lt;li&gt;Telecom&lt;/li&gt;
  &lt;li&gt;Ministries of Foreign Affairs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cyber-kill-chain&quot;&gt;Cyber Kill Chain&lt;/h3&gt;

&lt;p&gt;WinDealer steals information of an infected &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PC&lt;/code&gt; and sends it to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C2&lt;/code&gt; server as described in here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_21-53.png&quot; alt=&quot;ckc&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;identification&quot;&gt;Identification&lt;/h3&gt;

&lt;p&gt;Two samples are being investigated:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sample.exe&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;372736 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc7207f09a6fe41c71626ad4d3f127ce&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;84e749c37978f9387e16fab29c7b1b291be93a63&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;28df5c75a2f78120ff96d4a72a3c23cee97c9b46c96410cf591af38cb4aed0fa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First of all, check our sample via VirusTotal:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/28df5c75a2f78120ff96d4a72a3c23cee97c9b46c96410cf591af38cb4aed0fa/details&quot;&gt;https://www.virustotal.com/gui/file/28df5c75a2f78120ff96d4a72a3c23cee97c9b46c96410cf591af38cb4aed0fa/details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-16.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, 52 of 68 AV engines detect our sample as malicious.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-18.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More of them detect file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backdoor.Win32.WINDEALER.ZYJA&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;static-analysis&quot;&gt;Static analysis&lt;/h3&gt;

&lt;p&gt;The specified sample is a PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-13.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-14.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt; for looking metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-09.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we see that file timestamp is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2021-01-25 13:32:26+03.00&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Executable sample is not packed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upx&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upx &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &amp;lt;sample.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-11.png&quot; alt=&quot;upx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What about Shannon entropy of the sample:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-15.png&quot; alt=&quot;shannon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analysze with DIE says that the compiler is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft Visual Studio C++ (6.0)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-19.png&quot; alt=&quot;die&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-20.png&quot; alt=&quot;die&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Malware contains encrypted DLL:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-29_14-22.png&quot; alt=&quot;die&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interesting strings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-30.png&quot; alt=&quot;strings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The hardcoded version of WinDealer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-34.png&quot; alt=&quot;version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18.20.1225&lt;/code&gt; - version: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18&lt;/code&gt;, year: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2020&lt;/code&gt;, month and day: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12.25&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;another intersting strings is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SYSTEM\CurrentControlSet\Control\Network\{4D36E972-E325-11CE-BFC1-08002BE10318}\%s\Connection&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_11-43.png&quot; alt=&quot;string&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-analysis&quot;&gt;Dynamic analysis&lt;/h3&gt;

&lt;p&gt;The sample is GUI application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-38.png&quot; alt=&quot;winmain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Contacted IP addresses is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-25.png&quot; alt=&quot;ip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;May sleep (evasive loops) to hinder dynamic analysis:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-32.png&quot; alt=&quot;sleep&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-45.png&quot; alt=&quot;sleep&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The operator has the power to rename, move, and delete files on the target machine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-50.png&quot; alt=&quot;createfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-53.png&quot; alt=&quot;createfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-54.png&quot; alt=&quot;delete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also malware search through directories and enum filesystem:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-48.png&quot; alt=&quot;createfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and collecting volume information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-53_1.png&quot; alt=&quot;vol&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;api-hooking&quot;&gt;API hooking&lt;/h4&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterlockedExchange&lt;/code&gt;, probably the malware sample is hooking the winapi functions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-06.png&quot; alt=&quot;interlocked&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;avsandbox-evasion&quot;&gt;AV/Sandbox evasion&lt;/h4&gt;

&lt;p&gt;In the malware sample above, the delay timeout is set using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetTickCount()&lt;/code&gt; timer function. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; function is called in a loop until the timer timeout. In the sandbox, delays that are performed by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; function are skipped (replaced with a very short timeout) and the virtually elapsed time will be much higher than the requested timeout. The concept behind these methods is to measure elapsed time while running several forms of delays in parallel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-01.png&quot; alt=&quot;timer&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;sample2.exe&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;File size: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;458752 bytes&lt;/code&gt;  &lt;br /&gt;
MD5 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;76ba5272a17fdab7521ea21a57d23591&lt;/code&gt;   &lt;br /&gt;
SHA-1 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6b831413932a394bd9fb25e2bbdc06533821378c&lt;/code&gt;  &lt;br /&gt;
SHA-256 sum: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecd001aeb6bcbafb3e2fda74d76eea3c0ddad4e6e7ff1f43cd7709d4b4580261&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;VirusTotal scan result:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.virustotal.com/gui/file/ecd001aeb6bcbafb3e2fda74d76eea3c0ddad4e6e7ff1f43cd7709d4b4580261/detection&quot;&gt;https://www.virustotal.com/gui/file/ecd001aeb6bcbafb3e2fda74d76eea3c0ddad4e6e7ff1f43cd7709d4b4580261/detection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-19.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-20.png&quot; alt=&quot;vt&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;static-analysis-1&quot;&gt;Static analysis&lt;/h3&gt;

&lt;p&gt;The specified sample is a PE file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file &amp;lt;sample2.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-02.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hexdump &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;sample2.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-03.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-11.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run exiftool for extracting metadata:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool &amp;lt;sample2.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_12-21.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The sample is a Windows GUI file with timestamp: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2021:03:06 04:13:51+03:00&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-analysis-1&quot;&gt;Dynamic analysis&lt;/h3&gt;

&lt;p&gt;Generating victim &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ID&lt;/code&gt; set in a registry key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_15-54.png&quot; alt=&quot;victim&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The format of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victim ID&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;md5(&quot;&amp;lt;MAC address&amp;gt;+&amp;lt;Physical_Drive_info&amp;gt;+&amp;lt;username&amp;gt;&quot;)&lt;/code&gt;. The malware generates a unique registry entry to store the victim ID for subsequent execution. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victim ID&lt;/code&gt; is not saved as raw data; instead, the malware changes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; bytes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;victim ID&lt;/code&gt; to an IP address format.&lt;/p&gt;

&lt;p&gt;This sample collecting host information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-27.png&quot; alt=&quot;host&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;encoding&quot;&gt;Encoding&lt;/h4&gt;

&lt;p&gt;Malware sample use function call obfuscation:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetUserNameW&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-43.png&quot; alt=&quot;username&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegCreateKeyExA&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-43_1.png&quot; alt=&quot;reg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegDeleteKeyA&lt;/code&gt;&lt;/em&gt; and &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegCloseKey&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-45.png&quot; alt=&quot;reg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegQueryValueExA&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_16-42.png&quot; alt=&quot;reg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetTokenInformation&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-41.png&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenProcessToken&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-40.png&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenThreadToken&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-39.png&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdjustTokenPrivileges&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-33.png&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;.etc.&lt;/p&gt;

&lt;p&gt;So, malware sample use one of the interesting classic APT techniques: Token theft via turn on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SeDebugPrivilege&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//....&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TOKEN_PRIVILEGES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LUID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrivilegeCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Privileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Luid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Privileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SE_PRIVILEGE_ENABLED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LookupPrivilegeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;luid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenProcessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCurrentProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOKEN_ADJUST_PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AdjustTokenPrivileges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TOKEN_PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PTOKEN_PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PDWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;registry-modifications-and-persistence&quot;&gt;Registry Modifications and Persistence&lt;/h4&gt;

&lt;p&gt;With a high degree of probability, it can be argued that WinDealer has the functionality of interacting with the registry, probably for persistence mechanism:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-01-26_19-04.png&quot; alt=&quot;reg1&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;encryption&quot;&gt;Encryption&lt;/h4&gt;

&lt;p&gt;Generate 16 bytes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AES&lt;/code&gt; key to encrypt C2 communication:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-17.png&quot; alt=&quot;crypt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_13-18.png&quot; alt=&quot;crypt&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;c2-anti-tracking-mechanism&quot;&gt;C2 anti-tracking mechanism&lt;/h4&gt;

&lt;p&gt;This malware sample employs an IP Generation Algorithm to generate a random C2 IP address when the backdoor lacks C2 configuration. The IP produced at random will exist inside particular IP address ranges:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;113.62.0.0 - 113.63.255.255&lt;/code&gt; or   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;111.120.0.0 - 111.123.255.255&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2/2023-03-30_16-11.png&quot; alt=&quot;ip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This mechanism will prevent researchers from tracking down the real C2 IP.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backdoor.Win32.WINDEALER.ZYJA&lt;/code&gt; is a variant of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinDealer&lt;/code&gt; malware family. It is a type of backdoor malware that is designed to allow remote attackers to gain unauthorized access to an infected computer system. Once installed, the malware creates a backdoor on the infected system, which allows the attacker to control the system and steal sensitive data.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backdoor.Win32.WINDEALER.ZYJA&lt;/code&gt; variant is known to be spread through spear-phishing emails that contain malicious attachments. Once the attachment is opened, the malware is installed and begins to communicate with a remote command-and-control server, allowing the attacker to send commands to the infected system and exfiltrate data.&lt;/p&gt;

&lt;p&gt;The malware is capable of performing a range of malicious activities, including stealing credentials and sensitive data, taking screenshots, recording keystrokes, and executing arbitrary commands on the infected system. The malware is also capable of bypassing antivirus and other security software, making it difficult to detect and remove.&lt;/p&gt;

&lt;h3 id=&quot;iocs&quot;&gt;IOCs&lt;/h3&gt;

&lt;h4 id=&quot;versions&quot;&gt;versions&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Malware&lt;/th&gt;
      &lt;th&gt;version&lt;/th&gt;
      &lt;th&gt;md5&lt;/th&gt;
      &lt;th&gt;sha1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;WinDealer&lt;/td&gt;
      &lt;td&gt;18.20.1225&lt;/td&gt;
      &lt;td&gt;76ba5272a17fdab7521ea21a57d23591&lt;/td&gt;
      &lt;td&gt;6b831413932a394bd9fb25e2bbdc06533821378c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WinDealer&lt;/td&gt;
      &lt;td&gt;18.20.1225&lt;/td&gt;
      &lt;td&gt;cc7207f09a6fe41c71626ad4d3f127ce&lt;/td&gt;
      &lt;td&gt;84e749c37978f9387e16fab29c7b1b291be93a63&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;domain-ips&quot;&gt;domain IPs&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;113.62.0.0/15 111.120.0.0/14&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;55556/TCP&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6999/UDP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;221.195.68.71/32&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;122.112.245.55/32&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;yara-rules-from-malpedia&quot;&gt;Yara rules (from Malpedia)&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;rule win_windealer_auto {&lt;/span&gt;

    &lt;span class=&quot;s&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;author = &quot;Felix Bilstein - yara-signator at cocacoding dot com&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;date = &quot;2023-01-25&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;version = &quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;description = &quot;Detects win.windealer.&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;info = &quot;autogenerated rule brought to you by yara-signator&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;tool = &quot;yara-signator v0.6.0&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;signator_config = &quot;callsandjumps;datarefs;binvalue&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_reference = &quot;https://malpedia.caad.fkie.fraunhofer.de/details/win.windealer&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_rule_date = &quot;20230124&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_hash = &quot;2ee0eebba83dce3d019a90519f2f972c0fcf9686&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_version = &quot;20230125&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_license = &quot;CC BY-SA 4.0&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;malpedia_sharing = &quot;TLP:WHITE&quot;&lt;/span&gt;

    &lt;span class=&quot;s&quot;&gt;/* DISCLAIMER&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* The strings used in this rule have been automatically selected from the&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* disassembly of memory dumps and unpacked files, using YARA-Signator.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* The code and documentation is published here&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;     *&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/fxb-cocacoding/yara-signator&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* As Malpedia is used as data source, please note that for a given&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* number of families, only single samples are documented.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* This likely impacts the degree of generalization these rules will offer.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* Take the described generation method also into consideration when you&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;* apply the rules in your use cases and assign them confidence levels.&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;*/&lt;/span&gt;


    &lt;span class=&quot;s&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;$sequence_0 = { 668b91d2070000 8a89d0070000 52 51 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   668b91d2070000       | mov                 dx, word ptr [ecx + 0x7d2]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8a89d0070000         | mov                 cl, byte ptr [ecx + 0x7d0]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   52                   | push                edx&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   51                   | push                ecx&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_1 = { ff15???????? 85c0 7407 50 ff15???????? 6a01 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 6, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   ff15????????         |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   85c0                 | test                eax, eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   7407                 | je                  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   ff15????????         |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   6a01                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_2 = { 6a01 50 56 e8???????? 83c410 8bc7 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 6, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   6a01                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   56                   | push                esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   e8????????           |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   83c410               | add                 esp, 0x10&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8bc7                 | mov                 eax, edi&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_3 = { 6a00 ff15???????? 85c0 7407 50 ff15???????? 6a01 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 7, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   6a00                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   ff15????????         |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   85c0                 | test                eax, eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   7407                 | je                  &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   ff15????????         |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   6a01                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_4 = { 6a04 50 6a04 68???????? 68???????? }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   6a04                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   6a04                 | push                &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   68????????           |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   68????????           |&lt;/span&gt;                     

        &lt;span class=&quot;s&quot;&gt;$sequence_5 = { 56 57 68da070000 e8???????? }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   56                   | push                esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   57                   | push                edi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   68da070000           | push                0x7da&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   e8????????           |&lt;/span&gt;                     

        &lt;span class=&quot;s&quot;&gt;$sequence_6 = { 50 56 e8???????? 83c410 8b4618 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   50                   | push                eax&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   56                   | push                esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   e8????????           |&lt;/span&gt;                     
            &lt;span class=&quot;s&quot;&gt;//   83c410               | add                 esp, 0x10&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8b4618               | mov                 eax, dword ptr [esi + 0x18]&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_7 = { 8b4d08 668b91d2070000 8a89d0070000 52 51 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 5, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8b4d08               | mov                 ecx, dword ptr [ebp + 8]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   668b91d2070000       | mov                 dx, word ptr [ecx + 0x7d2]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8a89d0070000         | mov                 cl, byte ptr [ecx + 0x7d0]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   52                   | push                edx&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   51                   | push                ecx&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_8 = { 53 56 57 68da070000 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   53                   | push                ebx&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   56                   | push                esi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   57                   | push                edi&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   68da070000           | push                0x7da&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;$sequence_9 = { 8b4d08 668b91d2070000 8a89d0070000 52 }&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;// n = 4, score = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8b4d08               | mov                 ecx, dword ptr [ebp + 8]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   668b91d2070000       | mov                 dx, word ptr [ecx + 0x7d2]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   8a89d0070000         | mov                 cl, byte ptr [ecx + 0x7d0]&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;//   52                   | push                edx&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;7 of them and filesize &amp;lt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;770048&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By Cyber Threat Hunters from MSSPLab:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/zhassulan-zhussupov-5a347419b/&quot;&gt;@cocomelonc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/aruzhan-kaldybek-775735226&quot;&gt;@wqkasper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for your time happy hacking and good bye!       &lt;br /&gt;
&lt;em&gt;All drawings and screenshots are MSSPLab’s&lt;/em&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="threat-hunting" /><category term="blueteam" /><category term="malware" /><category term="malwareanalysis" /><summary type="html">WinDealer is a type of malware that is used for financial fraud and theft. It is a banking Trojan that is designed to steal sensitive financial information, such as login credentials, credit card numbers, and other personal information from victims’ computers.</summary></entry><entry><title type="html">Welcome to our cybersecurity blog</title><link href="http://localhost:4000/tutorial/2023/05/07/welcome.html" rel="alternate" type="text/html" title="Welcome to our cybersecurity blog" /><published>2023-05-07T05:00:00+03:00</published><updated>2023-05-07T05:00:00+03:00</updated><id>http://localhost:4000/tutorial/2023/05/07/welcome</id><content type="html" xml:base="http://localhost:4000/tutorial/2023/05/07/welcome.html">&lt;p&gt;Welcome to our cybersecurity blog!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/1/welcome.png&quot; alt=&quot;welcome&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will describe techniques for the successful work of the red team, the blue team, threat hunting, research and case studies about penetration testing and programming exploits. This blog will include our investigations into cybersecurity incidents and malware analysis.&lt;/p&gt;

&lt;p&gt;Also, our open source projects will be described here. We will provide the full source codes and we hope it will be a good contribution to the cybersecurity community:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have questions, you can ask them on our &lt;a href=&quot;mailto:info@mssp.global&quot;&gt;email&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our Github repo: &lt;a href=&quot;https://github.com/MSSPLab&quot;&gt;https://github.com/MSSPLab&lt;/a&gt;&lt;/p&gt;</content><author><name>MSSP Lab</name></author><category term="tutorial" /><category term="redteam" /><category term="blueteam" /><category term="purpleteam" /><category term="pentest" /><category term="malware" /><summary type="html">Welcome to our cybersecurity blog!</summary></entry></feed>